/*var fonts = {
    Roboto: {
      normal: 'C:/GTC/Fonts/Roboto-Regular.ttf',
      bold: 'C:/GTC/Fonts/Roboto-Bold.ttf',
      italics: 'C:/GTC/Fonts/Montserrat-Italic.ttf',
      bolditalics: 'C:/GTC/Fonts/Montserrat-BoldItalic.ttf'
    }
};*/


var fonts = {
    Roboto: {
      normal: '/Users/alexishernandezolvera/Desktop/GTC/PROYECTOS/gtc-services-portal-api/utils/fonts/Roboto-Regular.ttf',
      bold: '/Users/alexishernandezolvera/Desktop/GTC/PROYECTOS/gtc-services-portal-api/utils/fonts/Roboto-Bold.ttf',
      italics: '/Users/alexishernandezolvera/Desktop/GTC/PROYECTOS/gtc-services-portal-api/utils/fonts/Montserrat-Italic.ttf',
      bolditalics: '/Users/alexishernandezolvera/Desktop/GTC/PROYECTOS/gtc-services-portal-api/utils/fonts/Montserrat-BoldItalic.ttf'
    }
};

var convert = require('xml-js');
var PdfPrinter = require('pdfmake');
var printer = new PdfPrinter(fonts);
const { AwesomeQR } = require("awesome-qr");
const fs = require("fs");

const xml = require('../../xml.js')
const pdf2base64 = require('pdf-to-base64');

const dbcatcatalogs = require('../../../controllers/cat-catalogs')
const dbcatgeneralparameters = require('../../../controllers/cat-general-parameters');
const e = require('connect-timeout');
const logger = require('../../logger.js');

var xml64 = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPGNmZGk6Q29tcHJvYmFudGUgeG1sbnM6Y2ZkaT0iaHR0cDovL3d3dy5zYXQuZ29iLm14L2NmZC8zIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly93d3cuc2F0LmdvYi5teC9jZmQvMyBodHRwOi8vd3d3LnNhdC5nb2IubXgvc2l0aW9faW50ZXJuZXQvY2ZkLzMvY2ZkdjMzLnhzZCIgVmVyc2lvbj0iMy4zIiBTZXJpZT0iUkkiIEZvbGlvPSI5MDA3MSIgRmVjaGE9IjIwMjItMDMtMDhUMTc6MDQ6MTgiIFNlbGxvPSIiIEZvcm1hUGFnbz0iOTkiIE5vQ2VydGlmaWNhZG89IiIgQ2VydGlmaWNhZG89IiIgQ29uZGljaW9uZXNEZVBhZ289IjYwIERJQVMgTkVUT1MiIFN1YlRvdGFsPSI1MDU1NCIgTW9uZWRhPSJNWE4iIFRpcG9DYW1iaW89IjEiIFRvdGFsPSI1ODY0Mi42NCIgVGlwb0RlQ29tcHJvYmFudGU9IkkiIE1ldG9kb1BhZ289IlBQRCIgTHVnYXJFeHBlZGljaW9uPSI3NjI0NiI+Cgk8Y2ZkaTpFbWlzb3IgUmZjPSJJUE02MjAzMjI2QjQiIE5vbWJyZT0iSVRXIFBvbHltZXggUyBERSBSTCBERSBDViIgUmVnaW1lbkZpc2NhbD0iNjAxIi8+Cgk8Y2ZkaTpSZWNlcHRvciBSZmM9IkRNQTk4MDcyNTJWQSIgTm9tYnJlPSJESVNUUklCVUlET1JBIE1BUlBWRUwgREUgQVVUT1BBUlRFUyBTQSAgREUgQ1YiIFVzb0NGREk9IkcwMSIvPgoJPGNmZGk6Q29uY2VwdG9zPgoJCTxjZmRpOkNvbmNlcHRvIENsYXZlUHJvZFNlcnY9IjMxMjAxNjMxIiBOb0lkZW50aWZpY2FjaW9uPSIxMDMtQSIgQ2FudGlkYWQ9IjEwIiBDbGF2ZVVuaWRhZD0iWDRHIiBVbmlkYWQ9IkNBIiBEZXNjcmlwY2lvbj0iSU5GTEEtTExBTlRBUyBRVEYgMzQxRyIgVmFsb3JVbml0YXJpbz0iNzgzLjMwMDAiIEltcG9ydGU9Ijc4MzMuMDAiID4KCQkJPGNmZGk6SW1wdWVzdG9zPgoJCQk8Y2ZkaTpUcmFzbGFkb3M+CgkJCQk8Y2ZkaTpUcmFzbGFkbyBCYXNlPSI3ODMzLjAwIiBJbXB1ZXN0bz0iMDAyIiBUaXBvRmFjdG9yPSJUYXNhIiBUYXNhT0N1b3RhPSIwLjE2MDAwMCIgSW1wb3J0ZT0iMTI1My4yOCIgLz4KCQkJPC9jZmRpOlRyYXNsYWRvcz4KCQkJPC9jZmRpOkltcHVlc3Rvcz4KCQk8L2NmZGk6Q29uY2VwdG8+CgkJPGNmZGk6Q29uY2VwdG8gQ2xhdmVQcm9kU2Vydj0iMzEyMDE2MjciIE5vSWRlbnRpZmljYWNpb249IjE0LUEiIENhbnRpZGFkPSIxMCIgQ2xhdmVVbmlkYWQ9Ilg0RyIgVW5pZGFkPSJDQSIgRGVzY3JpcGNpb249IkZJSkFET1IgVEYgMjQ1IEFaVUwgNk1MIiBWYWxvclVuaXRhcmlvPSIxOTAxLjIwMDAiIEltcG9ydGU9IjE5MDEyLjAwIiA+CgkJCTxjZmRpOkltcHVlc3Rvcz4KCQkJPGNmZGk6VHJhc2xhZG9zPgoJCQkJPGNmZGk6VHJhc2xhZG8gQmFzZT0iMTkwMTIuMDAiIEltcHVlc3RvPSIwMDIiIFRpcG9GYWN0b3I9IlRhc2EiIFRhc2FPQ3VvdGE9IjAuMTYwMDAwIiBJbXBvcnRlPSIzMDQxLjkyIiAvPgoJCQk8L2NmZGk6VHJhc2xhZG9zPgoJCQk8L2NmZGk6SW1wdWVzdG9zPgoJCTwvY2ZkaTpDb25jZXB0bz4KCQk8Y2ZkaTpDb25jZXB0byBDbGF2ZVByb2RTZXJ2PSIzMTIwMTYwMCIgTm9JZGVudGlmaWNhY2lvbj0iMjItQyIgQ2FudGlkYWQ9IjEwIiBDbGF2ZVVuaWRhZD0iWDRHIiBVbmlkYWQ9IkNBIiBEZXNjcmlwY2lvbj0iU0VMTEEgRlVHQVMgUkFESUFET1IgMzU1TUwiIFZhbG9yVW5pdGFyaW89IjQwMS44MDAwIiBJbXBvcnRlPSI0MDE4LjAwIiA+CgkJCTxjZmRpOkltcHVlc3Rvcz4KCQkJPGNmZGk6VHJhc2xhZG9zPgoJCQkJPGNmZGk6VHJhc2xhZG8gQmFzZT0iNDAxOC4wMCIgSW1wdWVzdG89IjAwMiIgVGlwb0ZhY3Rvcj0iVGFzYSIgVGFzYU9DdW90YT0iMC4xNjAwMDAiIEltcG9ydGU9IjY0Mi44OCIgLz4KCQkJPC9jZmRpOlRyYXNsYWRvcz4KCQkJPC9jZmRpOkltcHVlc3Rvcz4KCQk8L2NmZGk6Q29uY2VwdG8+CgkJPGNmZGk6Q29uY2VwdG8gQ2xhdmVQcm9kU2Vydj0iNDcxMzE4MjEiIE5vSWRlbnRpZmljYWNpb249IjI1MTA4IiBDYW50aWRhZD0iMTAiIENsYXZlVW5pZGFkPSJYNEciIFVuaWRhZD0iQ0EiIERlc2NyaXBjaW9uPSJGQVNUIE9SQU5HRSBMSU1QSUFET1IgTUFOT1MgNy4iIFZhbG9yVW5pdGFyaW89IjYyNy4yMDAwIiBJbXBvcnRlPSI2MjcyLjAwIiA+CgkJCTxjZmRpOkltcHVlc3Rvcz4KCQkJPGNmZGk6VHJhc2xhZG9zPgoJCQkJPGNmZGk6VHJhc2xhZG8gQmFzZT0iNjI3Mi4wMCIgSW1wdWVzdG89IjAwMiIgVGlwb0ZhY3Rvcj0iVGFzYSIgVGFzYU9DdW90YT0iMC4xNjAwMDAiIEltcG9ydGU9IjEwMDMuNTIiIC8+CgkJCTwvY2ZkaTpUcmFzbGFkb3M+CgkJCTwvY2ZkaTpJbXB1ZXN0b3M+CgkJPC9jZmRpOkNvbmNlcHRvPgoJCTxjZmRpOkNvbmNlcHRvIENsYXZlUHJvZFNlcnY9IjMxMjAxNjAwIiBOb0lkZW50aWZpY2FjaW9uPSI2MS1BIiBDYW50aWRhZD0iMTAiIENsYXZlVW5pZGFkPSJYNEciIFVuaWRhZD0iQ0EiIERlc2NyaXBjaW9uPSJTT0xEQURVUkEgRU4gRlJJTyBUIDcwRyIgVmFsb3JVbml0YXJpbz0iMTM0MS45MDAwIiBJbXBvcnRlPSIxMzQxOS4wMCIgPgoJCQk8Y2ZkaTpJbXB1ZXN0b3M+CgkJCTxjZmRpOlRyYXNsYWRvcz4KCQkJCTxjZmRpOlRyYXNsYWRvIEJhc2U9IjEzNDE5LjAwIiBJbXB1ZXN0bz0iMDAyIiBUaXBvRmFjdG9yPSJUYXNhIiBUYXNhT0N1b3RhPSIwLjE2MDAwMCIgSW1wb3J0ZT0iMjE0Ny4wNCIgLz4KCQkJPC9jZmRpOlRyYXNsYWRvcz4KCQkJPC9jZmRpOkltcHVlc3Rvcz4KCQk8L2NmZGk6Q29uY2VwdG8+Cgk8L2NmZGk6Q29uY2VwdG9zPgoJPGNmZGk6SW1wdWVzdG9zIFRvdGFsSW1wdWVzdG9zVHJhc2xhZGFkb3M9IjgwODguNjQiPgoJCTxjZmRpOlRyYXNsYWRvcz4KCQkJPGNmZGk6VHJhc2xhZG8gSW1wdWVzdG89IjAwMiIgVGlwb0ZhY3Rvcj0iVGFzYSIgVGFzYU9DdW90YT0iMC4xNjAwMDAiIEltcG9ydGU9IjgwODguNjQiIC8+CgkJPC9jZmRpOlRyYXNsYWRvcz4KCTwvY2ZkaTpJbXB1ZXN0b3M+Cgk8Y2ZkaTpDb21wbGVtZW50bz4KCQk8bGV5ZW5kYXNGaXNjOkxleWVuZGFzRmlzY2FsZXMgVmVyc2lvbj0iMS4wIiB4bWxuczp4cz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOmxleWVuZGFzRmlzYz0iaHR0cDovL3d3dy5zYXQuZ29iLm14L2xleWVuZGFzRmlzY2FsZXMiIHRhcmdldE5hbWVzcGFjZT0iaHR0cDovL3d3dy5zYXQuZ29iLm14L2xleWVuZGFzRmlzY2FsZXMiPgoJCQk8bGV5ZW5kYXNGaXNjOkxleWVuZGEgZGlzcG9zaWNpb25GaXNjYWw9IlJHQ0UiIG5vcm1hPSI1LjIuNi4iIHRleHRvTGV5ZW5kYT0iRGUgY29uZm9ybWlkYWQgYWwgYXJ0w61jdWxvIDI5LCBmcmFjY2nDs24gSSBkZSBsYSBMZXkgZGVsIElWQSB5IGxhIHJlZ2xhIDUuMi41LiwgZnJhY2Npw7NuIElJLCBkZSBsYXMgUmVnbGFzIEdlbmVyYWxlcyBkZSBDb21lcmNpbyBFeHRlcmlvciBwYXJhIDIwMjIgc2UgcmVhbGl6YSBsYSBwcmVzZW50ZSBvcGVyYWNpw7NuIGN1bXBsaWVuZG8gY29uIGxvIGVzdGFibGVjaWRvIGVuIGxhcyByZWdsYXMgNC4zLjIxLiB5IDUuMi42LiBTZSB0cmFuc2ZpZXJlIGxhIG1lcmNhbmPDrWEgYSBERUxNRVggREUgSlVBUkVaIFMgREUgUkwgREUgQ1YgcXVpZW4gY3VlbnRhIGNvbiBuw7ptZXJvIGRlIHJlZ2lzdHJvIElNTUVYIDcwMi0yMDA2LiIvPgoJCTwvbGV5ZW5kYXNGaXNjOkxleWVuZGFzRmlzY2FsZXM+Cgk8L2NmZGk6Q29tcGxlbWVudG8+CjwvY2ZkaTpDb21wcm9iYW50ZT4="
var xml642 = ""
var xml643 = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz48Y2ZkaTpDb21wcm9iYW50ZSB4bWxuczpjZmRpPSJodHRwOi8vd3d3LnNhdC5nb2IubXgvY2ZkLzMiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL3d3dy5zYXQuZ29iLm14L2NmZC8zIGh0dHA6Ly93d3cuc2F0LmdvYi5teC9zaXRpb19pbnRlcm5ldC9jZmQvMy9jZmR2MzMueHNkIGh0dHA6Ly93d3cuc2F0LmdvYi5teC9sZXllbmRhc0Zpc2NhbGVzIGh0dHA6Ly93d3cuc2F0LmdvYi5teC9zaXRpb19pbnRlcm5ldC9jZmQvbGV5ZW5kYXNGaXNjYWxlcy9sZXllbmRhc0Zpc2MueHNkIiB4bWxuczpsZXllbmRhc0Zpc2M9Imh0dHA6Ly93d3cuc2F0LmdvYi5teC9sZXllbmRhc0Zpc2NhbGVzIiBWZXJzaW9uPSIzLjMiIFNlcmllPSJSSSIgRm9saW89IjkxODI5IiBGZWNoYT0iMjAyMi0wNC0xMVQxMTo0NDozNSIgU2VsbG89Im5lL1YyQTU5WTBNZ1JBeXlqWFU2bHNlNWZFZlBxbU5BbjlaSHBlNmFYNmVBdHVQSjhOcWhlZ1VVbHVFNm1YMWsxSGFuV1VLS3NzOHNOdG85SW11ak1tWTg1d2dhNUY4b0IwM1RiUFNtblp2MFhqSCtVMlRpQzBWUGUzRmNvSFQ0Ris5R2JSUGMxaUJ3WUhZRzIwaGk5aFZLSWdLTmRlQjBFMW1PTWtUSW05d1M4U0psbXVVV21QQVQxei82R2JmcmViTWh4ZjRvbGxBTHFuYjRpOHhsVHVPRkgrTUdYejd4R3Zxb1pEQk9RYjlaQStJV3drL2FTdk1GUXBhSE1XRktCM3A1dHhvOXRqQ1VQdnF5RVpzeE5KVVNYVmYvekpFUW5YeGhReUxEekRTek5RTzk0QXhZYjZ1MmprQWd6NElPTFl0NmNtL081aGE2cWJjaWhzVEJNdz09IiBGb3JtYVBhZ289Ijk5IiBOb0NlcnRpZmljYWRvPSIwMDAwMTAwMDAwMDUwNjc0MjMwOCIgQ2VydGlmaWNhZG89Ik1JSUYvRENDQStTZ0F3SUJBZ0lVTURBd01ERXdNREF3TURBMU1EWTNOREl6TURnd0RRWUpLb1pJaHZjTkFRRUxCUUF3Z2dHRU1TQXdIZ1lEVlFRRERCZEJWVlJQVWtsRVFVUWdRMFZTVkVsR1NVTkJSRTlTUVRFdU1Dd0dBMVVFQ2d3bFUwVlNWa2xEU1U4Z1JFVWdRVVJOU1U1SlUxUlNRVU5KVDA0Z1ZGSkpRbFZVUVZKSlFURWFNQmdHQTFVRUN3d1JVMEZVTFVsRlV5QkJkWFJvYjNKcGRIa3hLakFvQmdrcWhraUc5dzBCQ1FFV0cyTnZiblJoWTNSdkxuUmxZMjVwWTI5QWMyRjBMbWR2WWk1dGVERW1NQ1FHQTFVRUNRd2RRVll1SUVoSlJFRk1SMDhnTnpjc0lFTlBUQzRnUjFWRlVsSkZVazh4RGpBTUJnTlZCQkVNQlRBMk16QXdNUXN3Q1FZRFZRUUdFd0pOV0RFWk1CY0dBMVVFQ0F3UVEwbFZSRUZFSUVSRklFMUZXRWxEVHpFVE1CRUdBMVVFQnd3S1ExVkJWVWhVUlUxUFF6RVZNQk1HQTFVRUxSTU1VMEZVT1Rjd056QXhUazR6TVZ3d1dnWUpLb1pJaHZjTkFRa0NFMDF5WlhOd2IyNXpZV0pzWlRvZ1FVUk5TVTVKVTFSU1FVTkpUMDRnUTBWT1ZGSkJUQ0JFUlNCVFJWSldTVU5KVDFNZ1ZGSkpRbFZVUVZKSlQxTWdRVXdnUTA5T1ZGSkpRbFZaUlU1VVJUQWVGdzB5TVRBek1USXdNRE0zTlROYUZ3MHlOVEF6TVRJd01ETTNOVE5hTUlIS01TTXdJUVlEVlFRREV4cEpWRmNnVUU5TVdTQk5SVmdnVXlCRVJTQlNUQ0JFUlNCRFZqRWpNQ0VHQTFVRUtSTWFTVlJYSUZCUFRGa2dUVVZZSUZNZ1JFVWdVa3dnUkVVZ1ExWXhJekFoQmdOVkJBb1RHa2xVVnlCUVQweFpJRTFGV0NCVElFUkZJRkpNSUVSRklFTldNU1V3SXdZRFZRUXRFeHhKVUUwMk1qQXpNakkyUWpRZ0x5Qk1TVkpCT0RFd05UQTNVVEl5TVI0d0hBWURWUVFGRXhVZ0x5Qk1TVkpCT0RFd05UQTNUVlphUTAxTU1EZ3hFakFRQmdOVkJBc1RDVkJTU1U1RFNWQkJURENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMcTNTMFZNU240MW5DUXR0WFgvcUNKTE5QS3NmN01GVThMUUlMOVBtNGF4bXRRazNNSVdSczR2dDVnbHlmUUJPWCsxWUlNY0RLTUhNU1d6SXJKZHJxSEx4b1BJWXFHbFE1dTg4WlNLSjZ4SHlrSC9CanhXOHZ0TTJFcmlGeHo0U3doeTJEQ0hWbEFONnZudjQxMXVjbTJ2NWFLUGNPUlNYalN6dGhVNnYrSDhodFN6T2V1KzYzQTFzRW5Eb0hlRW5XV1I3UjFVakhYNUd0SkxpdlZiWGMraFdLcDVUNk5PbGlpNEMvMTdZcTk1b2dXSWlLUFJ6VUxNaUhXampIbkhqdDRGRDFLMEtkOWYxYWZmYjZLZ3E1SWVQbHlXcVpNTzlmVDhlU1laOUZtcWxTamlWTGJIS3dlS2RhZ2ROeE9POEZ3Wld4QVdINEpWVkx1dXZnTVFxWnNDQXdFQUFhTWRNQnN3REFZRFZSMFRBUUgvQkFJd0FEQUxCZ05WSFE4RUJBTUNCc0F3RFFZSktvWklodmNOQVFFTEJRQURnZ0lCQUQ3bzFoQldic1FOREpsT1dKRkR3aG10azF5a0l6YVZHSWVibHVYMVZIUHJPN1NOSjBTUnVPWk5CS0FYRUxCRjJHUm5kaXlJMWFPdWwzaWdEUVc0c1l2SEc4ZExGcXgyUVRXd2V2Z2xKSm43eEF5QUdQZ1NnWXA3a0N0M3dmRnc0NVY5TFF4RFVaa0tsTGtYR2ZNbFJzR0I1ejM1V3Z5R0xaQW9ZZEYwbUVQYW1iTVRWcUJHRlVBSlIxY29uQ0diTlFPUEg0M0lOeHFFN0x2VUYydzNieEEvU21TU0RRQXc5MnFQTE53WHJhaitXUERjUTdtWVUxQXJBVkdRczZvTjVPOVZSK0V6RDNWNzhwbFZweGNsdllxdk9GdG5Pa3p0NFRFdVNJTmM1dGJkMVd1Tm5SWHZUYzJ0UzBFT1F2SU5pWXhyNTRmcFl2eHZDVW40UDRoUnpheVRORFhCNDlUNldqbnMwOXFGZ0ZWOWQzZk5kcWRoVWQ1KzFTMzFCc0YrdFd6YjhpMEFzLzR3QzdTUkhxOC9aUlFKbDhpaUhwa1Q5N0NWUUNkeUV1SHNDVUh2YmkyRDkwMGt6NGNBQXVCQUpvVFF2Q2F4VTUyUVJmTmdXZk9FaWNjQVRZSlJ5TGR4ZXdKZ1RlRHo4UEZQb2NMcnZLUEU3bHROdE42Nzd5Y3JNcysrUGhRV3JqVTFMcURBWEk0Y2Ixb1VhUzM5TWRHZzcrRkVpVk9BYUVMelJwZDBleDNtYVNubVNnZHpLNEJoVzJYWWhLMElWcHFjaFpWdHdhNytYRFJlYk85WTZFWjFWeDFzcHpPbHdJR2Y4WlZNa3laOU56Qm1WQUtHSHFDczIwMHd4Q3M1MmYvdWJJQ25DV0hCd3RpYTJ5emJNalZ1bldRVG1NaTRlWlhsIiBDb25kaWNpb25lc0RlUGFnbz0iMzAgRElBUyBORVRPUyIgU3ViVG90YWw9IjI1ODkxLjgwIiBNb25lZGE9IlVTRCIgVGlwb0NhbWJpbz0iMTkuNzQ0MzAwIiBUb3RhbD0iMjU4OTEuODAiIFRpcG9EZUNvbXByb2JhbnRlPSJJIiBNZXRvZG9QYWdvPSJQUEQiIEx1Z2FyRXhwZWRpY2lvbj0iNjQ5ODgiPjxjZmRpOkVtaXNvciBSZmM9IklQTTYyMDMyMjZCNCIgTm9tYnJlPSJJVFcgUG9seW1leCBTIERFIFJMIERFIENWIiBSZWdpbWVuRmlzY2FsPSI2MDEiIC8+PGNmZGk6UmVjZXB0b3IgUmZjPSJYQVhYMDEwMTAxMDAwIiBOb21icmU9IlZBTEVPIE5PUlRIIEFNRVJJQ0EgSU5DIiBVc29DRkRJPSJHMDEiIC8+PGNmZGk6Q29uY2VwdG9zPjxjZmRpOkNvbmNlcHRvIENsYXZlUHJvZFNlcnY9IjE1MTIxNTEzIiBOb0lkZW50aWZpY2FjaW9uPSIwNjIwMzU1IiBDYW50aWRhZD0iMyIgQ2xhdmVVbmlkYWQ9Ikg4NyIgVW5pZGFkPSJFQSIgRGVzY3JpcGNpb249IlJFQ1VCUklNSUVOVE8gTFJDIFRBTUJPUiA1NUdBTCIgVmFsb3JVbml0YXJpbz0iODYzMC42MDAwIiBJbXBvcnRlPSIyNTg5MS44MCI+PGNmZGk6SW1wdWVzdG9zPjxjZmRpOlRyYXNsYWRvcz48Y2ZkaTpUcmFzbGFkbyBCYXNlPSIyNTg5MS44MCIgSW1wdWVzdG89IjAwMiIgVGlwb0ZhY3Rvcj0iVGFzYSIgVGFzYU9DdW90YT0iMC4wMDAwMDAiIEltcG9ydGU9IjAuMDAiIC8+PC9jZmRpOlRyYXNsYWRvcz48L2NmZGk6SW1wdWVzdG9zPjwvY2ZkaTpDb25jZXB0bz48L2NmZGk6Q29uY2VwdG9zPjxjZmRpOkltcHVlc3RvcyBUb3RhbEltcHVlc3Rvc1RyYXNsYWRhZG9zPSIwIj48Y2ZkaTpUcmFzbGFkb3M+PGNmZGk6VHJhc2xhZG8gSW1wdWVzdG89IjAwMiIgVGlwb0ZhY3Rvcj0iVGFzYSIgVGFzYU9DdW90YT0iMC4wMDAwMDAiIEltcG9ydGU9IjAuMDAiIC8+PC9jZmRpOlRyYXNsYWRvcz48L2NmZGk6SW1wdWVzdG9zPjxjZmRpOkNvbXBsZW1lbnRvPjx0ZmQ6VGltYnJlRmlzY2FsRGlnaXRhbCB4bWxuczp0ZmQ9Imh0dHA6Ly93d3cuc2F0LmdvYi5teC9UaW1icmVGaXNjYWxEaWdpdGFsIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly93d3cuc2F0LmdvYi5teC9UaW1icmVGaXNjYWxEaWdpdGFsIGh0dHA6Ly93d3cuc2F0LmdvYi5teC9zaXRpb19pbnRlcm5ldC9jZmQvVGltYnJlRmlzY2FsRGlnaXRhbC9UaW1icmVGaXNjYWxEaWdpdGFsdjExLnhzZCIgVmVyc2lvbj0iMS4xIiBVVUlEPSIwQjg3ODUwOS1FQkRDLTQxMzEtODAxMy1DMjZGMjUzNDIyQjUiIEZlY2hhVGltYnJhZG89IjIwMjItMDQtMTFUMTM6MTM6MDIiIFJmY1Byb3ZDZXJ0aWY9IlNFRDExMDIwODhKNyIgU2VsbG9DRkQ9Im5lL1YyQTU5WTBNZ1JBeXlqWFU2bHNlNWZFZlBxbU5BbjlaSHBlNmFYNmVBdHVQSjhOcWhlZ1VVbHVFNm1YMWsxSGFuV1VLS3NzOHNOdG85SW11ak1tWTg1d2dhNUY4b0IwM1RiUFNtblp2MFhqSCtVMlRpQzBWUGUzRmNvSFQ0Ris5R2JSUGMxaUJ3WUhZRzIwaGk5aFZLSWdLTmRlQjBFMW1PTWtUSW05d1M4U0psbXVVV21QQVQxei82R2JmcmViTWh4ZjRvbGxBTHFuYjRpOHhsVHVPRkgrTUdYejd4R3Zxb1pEQk9RYjlaQStJV3drL2FTdk1GUXBhSE1XRktCM3A1dHhvOXRqQ1VQdnF5RVpzeE5KVVNYVmYvekpFUW5YeGhReUxEekRTek5RTzk0QXhZYjZ1MmprQWd6NElPTFl0NmNtL081aGE2cWJjaWhzVEJNdz09IiBOb0NlcnRpZmljYWRvU0FUPSIwMDAwMTAwMDAwMDUwMzkzODAwMSIgU2VsbG9TQVQ9IlluQy9KRlAzTkxiZHBBQ3kwVm9QRFNPekJlZTBKZmJwWmNhY2l4cTVnNmhabFpXUjNFanNRZmRnV1dpeVIwY2J0VmNsakY2cUx6TXRXQ2dVMi9tWC9WNTBFZkFvQUdpbGM5MVdWeDRBUENUV1RVN3RjOGJpRlk1cFcwcDdVZ00rWUExR1hkWFFCVmlNY2RmVVR1VGdUNkFVOEpoUVoyVzBvVnRxYzNZTGZqTmFaKzlvQURneHh5WmVHQThkK2tGb2R5Wm9YUjk2SW1jdnJ4UG9oNHJCRWZTcnRRSmNFei9XZFVBNDJ1aVNUSHVDV3hjTDcrYnFYT1RBVng4a3dCM1NkOHZublRwVWlybWY3d0ZHdGlUNHNDQ1liYy9hT0FWOEhRSEwrYk81Q0RYd1g5Y1JHcDFjVzhHWUs3SWhHMCs1ajg0MXhCUjhGSzg1QW5lSWxsMGRxZz09IiAvPjxsZXllbmRhc0Zpc2M6TGV5ZW5kYXNGaXNjYWxlcyB2ZXJzaW9uPSIxLjAiPjxsZXllbmRhc0Zpc2M6TGV5ZW5kYSBkaXNwb3NpY2lvbkZpc2NhbD0iUkdDRSIgbm9ybWE9IjUuMi42LiIgdGV4dG9MZXllbmRhPSJEZSBjb25mb3JtaWRhZCBhbCBhcnTDrWN1bG8gMjksIGZyYWNjacOzbiBJIGRlIGxhIExleSBkZWwgSVZBIHkgbGEgcmVnbGEgNS4yLjUuLCBmcmFjY2nDs24gSUksIGRlIGxhcyBSZWdsYXMgR2VuZXJhbGVzIGRlIENvbWVyY2lvIEV4dGVyaW9yIHBhcmEgMjAyMiBzZSByZWFsaXphIGxhIHByZXNlbnRlIG9wZXJhY2nDs24gY3VtcGxpZW5kbyBjb24gbG8gZXN0YWJsZWNpZG8gZW4gbGFzIHJlZ2xhcyA0LjMuMjEuIHkgNS4yLjYuICBTZSB0cmFuc2ZpZXJlIGxhIG1lcmNhbmPDrWEgYSBERUxNRVggREUgSlVBUkVaIFMgREUgUkwgREUgQ1YgcXVpZW4gY3VlbnRhIGNvbiBuw7ptZXJvIGRlIHJlZ2lzdHJvIElNTUVYIDcwMi0yMDA2LiIgLz48L2xleWVuZGFzRmlzYzpMZXllbmRhc0Zpc2NhbGVzPjwvY2ZkaTpDb21wbGVtZW50bz48L2NmZGk6Q29tcHJvYmFudGU+"
var xml644 = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPGNmZGk6Q29tcHJvYmFudGUgeG1sbnM6Y2ZkaT0iaHR0cDovL3d3dy5zYXQuZ29iLm14L2NmZC8zIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly93d3cuc2F0LmdvYi5teC9jZmQvMyBodHRwOi8vd3d3LnNhdC5nb2IubXgvc2l0aW9faW50ZXJuZXQvY2ZkLzMvY2ZkdjMzLnhzZCBodHRwOi8vd3d3LnNhdC5nb2IubXgvbGV5ZW5kYXNGaXNjYWxlcyBodHRwOi8vd3d3LnNhdC5nb2IubXgvc2l0aW9faW50ZXJuZXQvY2ZkL2xleWVuZGFzRmlzY2FsZXMvbGV5ZW5kYXNGaXNjLnhzZCIgeG1sbnM6bGV5ZW5kYXNGaXNjPSJodHRwOi8vd3d3LnNhdC5nb2IubXgvbGV5ZW5kYXNGaXNjYWxlcyIgVmVyc2lvbj0iMy4zIiBTZXJpZT0iUkkiIEZvbGlvPSI5NDQ3OSIgRmVjaGE9IjIwMjItMDYtMTRUMTA6NTI6NTEiIFNlbGxvPSJBclpkVVJQSmpqajR0V0s4ODdDYWZpN2VXNnUrUHpydUJ1WEtIbUV0eS9RNURONEF1cTJsU0ZYUDNsMW9EdStyVW9rYXJFNzhEalIyWUp1V2RoZElRSkhpSXUzSVEraEpuNkVVUWJRVHliaVRvbmNCYmk5RW5LVUFxNVVseDZjTUlHS0tWNVBnL3BiakMzVERMcEdRd25OVThwNEN3Kzdnd0xoQzdjS1V3Q1dqaXk5Z0ZYV1ZvbEhsem4waGt1SWlMUURWd1lQSzJ5c3kwZFd2QnFMZUowYlhXM2JHK2dlNnJMT25wdDRKVmhGWmZlS0VweEIwT2JPNGgyYmNlNElEamRMV3JncHQ2QzZpMVhYZzlySXZtVWJsV0ZLRjlPejZ5YktLdDEybnRMd1NPNm9oUGRxZzZWL0J6cDR6anpSbk5TcUpUTDhET3hXNXYyQ0paVm1lVmc9PSIgRm9ybWFQYWdvPSI5OSIgTm9DZXJ0aWZpY2Fkbz0iMDAwMDEwMDAwMDA1MDY3NDIzMDgiIENlcnRpZmljYWRvPSJNSUlGL0RDQ0ErU2dBd0lCQWdJVU1EQXdNREV3TURBd01EQTFNRFkzTkRJek1EZ3dEUVlKS29aSWh2Y05BUUVMQlFBd2dnR0VNU0F3SGdZRFZRUUREQmRCVlZSUFVrbEVRVVFnUTBWU1ZFbEdTVU5CUkU5U1FURXVNQ3dHQTFVRUNnd2xVMFZTVmtsRFNVOGdSRVVnUVVSTlNVNUpVMVJTUVVOSlQwNGdWRkpKUWxWVVFWSkpRVEVhTUJnR0ExVUVDd3dSVTBGVUxVbEZVeUJCZFhSb2IzSnBkSGt4S2pBb0Jna3Foa2lHOXcwQkNRRVdHMk52Ym5SaFkzUnZMblJsWTI1cFkyOUFjMkYwTG1kdllpNXRlREVtTUNRR0ExVUVDUXdkUVZZdUlFaEpSRUZNUjA4Z056Y3NJRU5QVEM0Z1IxVkZVbEpGVWs4eERqQU1CZ05WQkJFTUJUQTJNekF3TVFzd0NRWURWUVFHRXdKTldERVpNQmNHQTFVRUNBd1FRMGxWUkVGRUlFUkZJRTFGV0VsRFR6RVRNQkVHQTFVRUJ3d0tRMVZCVlVoVVJVMVBRekVWTUJNR0ExVUVMUk1NVTBGVU9UY3dOekF4VGs0ek1Wd3dXZ1lKS29aSWh2Y05BUWtDRTAxeVpYTndiMjV6WVdKc1pUb2dRVVJOU1U1SlUxUlNRVU5KVDA0Z1EwVk9WRkpCVENCRVJTQlRSVkpXU1VOSlQxTWdWRkpKUWxWVVFWSkpUMU1nUVV3Z1EwOU9WRkpKUWxWWlJVNVVSVEFlRncweU1UQXpNVEl3TURNM05UTmFGdzB5TlRBek1USXdNRE0zTlROYU1JSEtNU013SVFZRFZRUURFeHBKVkZjZ1VFOU1XU0JOUlZnZ1V5QkVSU0JTVENCRVJTQkRWakVqTUNFR0ExVUVLUk1hU1ZSWElGQlBURmtnVFVWWUlGTWdSRVVnVWt3Z1JFVWdRMVl4SXpBaEJnTlZCQW9UR2tsVVZ5QlFUMHhaSUUxRldDQlRJRVJGSUZKTUlFUkZJRU5XTVNVd0l3WURWUVF0RXh4SlVFMDJNakF6TWpJMlFqUWdMeUJNU1ZKQk9ERXdOVEEzVVRJeU1SNHdIQVlEVlFRRkV4VWdMeUJNU1ZKQk9ERXdOVEEzVFZaYVEwMU1NRGd4RWpBUUJnTlZCQXNUQ1ZCU1NVNURTVkJCVERDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTHEzUzBWTVNuNDFuQ1F0dFhYL3FDSkxOUEtzZjdNRlU4TFFJTDlQbTRheG10UWszTUlXUnM0dnQ1Z2x5ZlFCT1grMVlJTWNES01ITVNXeklySmRycUhMeG9QSVlxR2xRNXU4OFpTS0o2eEh5a0gvQmp4Vzh2dE0yRXJpRnh6NFN3aHkyRENIVmxBTjZ2bnY0MTF1Y20ydjVhS1BjT1JTWGpTenRoVTZ2K0g4aHRTek9ldSs2M0Exc0VuRG9IZUVuV1dSN1IxVWpIWDVHdEpMaXZWYlhjK2hXS3A1VDZOT2xpaTRDLzE3WXE5NW9nV0lpS1BSelVMTWlIV2pqSG5IanQ0RkQxSzBLZDlmMWFmZmI2S2dxNUllUGx5V3FaTU85ZlQ4ZVNZWjlGbXFsU2ppVkxiSEt3ZUtkYWdkTnhPTzhGd1pXeEFXSDRKVlZMdXV2Z01RcVpzQ0F3RUFBYU1kTUJzd0RBWURWUjBUQVFIL0JBSXdBREFMQmdOVkhROEVCQU1DQnNBd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dJQkFEN28xaEJXYnNRTkRKbE9XSkZEd2htdGsxeWtJemFWR0llYmx1WDFWSFByTzdTTkowU1J1T1pOQktBWEVMQkYyR1JuZGl5STFhT3VsM2lnRFFXNHNZdkhHOGRMRnF4MlFUV3dldmdsSkpuN3hBeUFHUGdTZ1lwN2tDdDN3ZkZ3NDVWOUxReERVWmtLbExrWEdmTWxSc0dCNXozNVd2eUdMWkFvWWRGMG1FUGFtYk1UVnFCR0ZVQUpSMWNvbkNHYk5RT1BINDNJTnhxRTdMdlVGMnczYnhBL1NtU1NEUUF3OTJxUExOd1hyYWorV1BEY1E3bVlVMUFyQVZHUXM2b041TzlWUitFekQzVjc4cGxWcHhjbHZZcXZPRnRuT2t6dDRURXVTSU5jNXRiZDFXdU5uUlh2VGMydFMwRU9RdklOaVl4cjU0ZnBZdnh2Q1VuNFA0aFJ6YXlUTkRYQjQ5VDZXam5zMDlxRmdGVjlkM2ZOZHFkaFVkNSsxUzMxQnNGK3RXemI4aTBBcy80d0M3U1JIcTgvWlJRSmw4aWlIcGtUOTdDVlFDZHlFdUhzQ1VIdmJpMkQ5MDBrejRjQUF1QkFKb1RRdkNheFU1MlFSZk5nV2ZPRWljY0FUWUpSeUxkeGV3SmdUZUR6OFBGUG9jTHJ2S1BFN2x0TnRONjc3eWNyTXMrK1BoUVdyalUxTHFEQVhJNGNiMW9VYVMzOU1kR2c3K0ZFaVZPQWFFTHpScGQwZXgzbWFTbm1TZ2R6SzRCaFcyWFloSzBJVnBxY2haVnR3YTcrWERSZWJPOVk2RVoxVngxc3B6T2x3SUdmOFpWTWt5WjlOekJtVkFLR0hxQ3MyMDB3eENzNTJmL3ViSUNuQ1dIQnd0aWEyeXpiTWpWdW5XUVRtTWk0ZVpYbCIgQ29uZGljaW9uZXNEZVBhZ289IjMwIERJQVMgTkVUT1MiIFN1YlRvdGFsPSIyNjY3Ni40MCIgTW9uZWRhPSJVU0QiIFRpcG9DYW1iaW89IjE5LjYxMjgwMCIgVG90YWw9IjI2Njc2LjQwIiBUaXBvRGVDb21wcm9iYW50ZT0iSSIgTWV0b2RvUGFnbz0iUFBEIiBMdWdhckV4cGVkaWNpb249IjY0OTg4Ij4KCTxjZmRpOkVtaXNvciBSZmM9IklQTTYyMDMyMjZCNCIgTm9tYnJlPSJJVFcgUG9seW1leCBTIERFIFJMIERFIENWIiBSZWdpbWVuRmlzY2FsPSI2MDEiLz4KCTxjZmRpOlJlY2VwdG9yIFJmYz0iWEFYWDAxMDEwMTAwMCIgTm9tYnJlPSJWQUxFTyBOT1JUSCBBTUVSSUNBIElOQyIgVXNvQ0ZEST0iRzAxIi8+Cgk8Y2ZkaTpDb25jZXB0b3M+CgkJPGNmZGk6Q29uY2VwdG8gQ2xhdmVQcm9kU2Vydj0iMTUxMjE1MTMiIE5vSWRlbnRpZmljYWNpb249IjYyMDM1NSIgQ2FudGlkYWQ9IjM0IiBDbGF2ZVVuaWRhZD0iSDg3IiBVbmlkYWQ9IkVBIiBEZXNjcmlwY2lvbj0iUkVDVUJSSU1JRU5UTyBMUkMgQ1VCRVRBIDVHQUwiIFZhbG9yVW5pdGFyaW89Ijc4NC42MDAwIiBJbXBvcnRlPSIyNjY3Ni40MCI+CgkJCTxjZmRpOkltcHVlc3Rvcz4KCQkJCTxjZmRpOlRyYXNsYWRvcz4KCQkJCQk8Y2ZkaTpUcmFzbGFkbyBCYXNlPSIyNjY3Ni40MCIgSW1wdWVzdG89IjAwMiIgVGlwb0ZhY3Rvcj0iVGFzYSIgVGFzYU9DdW90YT0iMC4wMDAwMDAiIEltcG9ydGU9IjAuMDAiLz4KCQkJCTwvY2ZkaTpUcmFzbGFkb3M+CgkJCTwvY2ZkaTpJbXB1ZXN0b3M+CgkJPC9jZmRpOkNvbmNlcHRvPgoJPC9jZmRpOkNvbmNlcHRvcz4KCTxjZmRpOkltcHVlc3RvcyBUb3RhbEltcHVlc3Rvc1RyYXNsYWRhZG9zPSIwIj4KCQk8Y2ZkaTpUcmFzbGFkb3M+CgkJCTxjZmRpOlRyYXNsYWRvIEltcHVlc3RvPSIwMDIiIFRpcG9GYWN0b3I9IlRhc2EiIFRhc2FPQ3VvdGE9IjAuMDAwMDAwIiBJbXBvcnRlPSIwLjAwIi8+CgkJPC9jZmRpOlRyYXNsYWRvcz4KCTwvY2ZkaTpJbXB1ZXN0b3M+Cgk8Y2ZkaTpDb21wbGVtZW50bz4KCQk8dGZkOlRpbWJyZUZpc2NhbERpZ2l0YWwgeG1sbnM6dGZkPSJodHRwOi8vd3d3LnNhdC5nb2IubXgvVGltYnJlRmlzY2FsRGlnaXRhbCIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vd3d3LnNhdC5nb2IubXgvVGltYnJlRmlzY2FsRGlnaXRhbCBodHRwOi8vd3d3LnNhdC5nb2IubXgvc2l0aW9faW50ZXJuZXQvY2ZkL1RpbWJyZUZpc2NhbERpZ2l0YWwvVGltYnJlRmlzY2FsRGlnaXRhbHYxMS54c2QiIFZlcnNpb249IjEuMSIgVVVJRD0iODQ1QTI4NkMtODRDNS00ODQ5LUFENjEtRERCRjhENDg1RERGIiBGZWNoYVRpbWJyYWRvPSIyMDIyLTA2LTE1VDExOjUwOjAzIiBSZmNQcm92Q2VydGlmPSJTRUQxMTAyMDg4SjciIFNlbGxvQ0ZEPSJBclpkVVJQSmpqajR0V0s4ODdDYWZpN2VXNnUrUHpydUJ1WEtIbUV0eS9RNURONEF1cTJsU0ZYUDNsMW9EdStyVW9rYXJFNzhEalIyWUp1V2RoZElRSkhpSXUzSVEraEpuNkVVUWJRVHliaVRvbmNCYmk5RW5LVUFxNVVseDZjTUlHS0tWNVBnL3BiakMzVERMcEdRd25OVThwNEN3Kzdnd0xoQzdjS1V3Q1dqaXk5Z0ZYV1ZvbEhsem4waGt1SWlMUURWd1lQSzJ5c3kwZFd2QnFMZUowYlhXM2JHK2dlNnJMT25wdDRKVmhGWmZlS0VweEIwT2JPNGgyYmNlNElEamRMV3JncHQ2QzZpMVhYZzlySXZtVWJsV0ZLRjlPejZ5YktLdDEybnRMd1NPNm9oUGRxZzZWL0J6cDR6anpSbk5TcUpUTDhET3hXNXYyQ0paVm1lVmc9PSIgTm9DZXJ0aWZpY2Fkb1NBVD0iMDAwMDEwMDAwMDA1MDM5MzgwMDEiIFNlbGxvU0FUPSJxbEhGa05SZ09BQ0Q1NzI0VHpZeEV5dFVtQTdLelRQQ3V0MjZ6THFXVDREV3psZnRCcm9NeE9HcGFVbVI3TUd0WkoxaU1YbDNQbGRtOW8zUmZESC95bWZDZTBhRFRjUlZIeEVEWXYxcXNEdHRySzJZZGl3L3kvRkNQaVdZWXVUejJtNmpPL09HaGZJTVhiSnQ4YytkRko4NzJ6Yzd5NWtZQWpOalhWcGxJTjFKWENjOHdlVXp3dFpDbExtRmRVTVJmQ0Z0YTE2OXZBMC9CdjA0Y0U2bXpkVWNrblVuaDJTUUpicnJFYnBUcmQyNVErTHdlbkp0dFBwQ3lzRjdpcS8yREZFNnlFVVV1S1NpL3lrWkt2T3hobkg4RXczU0htRnAyS3M4OVk2STZlc1BHMElsVkdpbk4yTHMxNlJMMVliQ3FCTGpqbmVQWFJ5NHJ2NUlIakl0aVE9PSIvPgoJCQk8bGV5ZW5kYXNGaXNjOkxleWVuZGFzRmlzY2FsZXMgdmVyc2lvbj0iMS4wIj4KCQkJPGxleWVuZGFzRmlzYzpMZXllbmRhIGRpc3Bvc2ljaW9uRmlzY2FsPSJSR0NFIiBub3JtYT0iNS4yLjYuIiB0ZXh0b0xleWVuZGE9IkRlIGNvbmZvcm1pZGFkIGFsIGFydMOtY3VsbyAyOSwgZnJhY2Npw7NuIEkgZGUgbGEgTGV5IGRlbCBJVkEgeSBsYSByZWdsYSA1LjIuNS4sIGZyYWNjacOzbiBJSSwgZGUgbGFzIFJlZ2xhcyBHZW5lcmFsZXMgZGUgQ29tZXJjaW8gRXh0ZXJpb3IgcGFyYSAyMDIyIHNlIHJlYWxpemEgbGEgcHJlc2VudGUgb3BlcmFjacOzbiBjdW1wbGllbmRvIGNvbiBsbyBlcyIvPgoJCTwvbGV5ZW5kYXNGaXNjOkxleWVuZGFzRmlzY2FsZXM+Cgk8L2NmZGk6Q29tcGxlbWVudG8+CjwvY2ZkaTpDb21wcm9iYW50ZT4="
var xml645 = ""
var xml646 = ""
var xmlPagos = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPGNmZGk6Q29tcHJvYmFudGUgeG1sbnM6Y2ZkaT0iaHR0cDovL3d3dy5zYXQuZ29iLm14L2NmZC8zIgogICAgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIKICAgIHhtbG5zOnBhZ28xMD0iaHR0cDovL3d3dy5zYXQuZ29iLm14L1BhZ29zIiB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly93d3cuc2F0LmdvYi5teC9QYWdvcyBodHRwOi8vd3d3LnNhdC5nb2IubXgvc2l0aW9faW50ZXJuZXQvY2ZkL1BhZ29zL1BhZ29zMTAueHNkIGh0dHA6Ly93d3cuc2F0LmdvYi5teC9jZmQvMyBodHRwOi8vd3d3LnNhdC5nb2IubXgvc2l0aW9faW50ZXJuZXQvY2ZkLzMvY2ZkdjMzLnhzZCIgVmVyc2lvbj0iMy4zIiBTZXJpZT0iUCIgRm9saW89IjMxNjUxIiBGZWNoYT0iMjAyMi0wNi0xM1QxNTowMzoxMCIgU3ViVG90YWw9IjAiIE1vbmVkYT0iWFhYIiBUb3RhbD0iMCIgVGlwb0RlQ29tcHJvYmFudGU9IlAiIEx1Z2FyRXhwZWRpY2lvbj0iNjQ5ODgiIE5vQ2VydGlmaWNhZG89IiIgQ2VydGlmaWNhZG89IiIgU2VsbG89IiI+CiAgICA8Y2ZkaTpFbWlzb3IgUmZjPSJJUE02MjAzMjI2QjQiIE5vbWJyZT0iSVRXIFBvbHltZXggUyBERSBSTCBERSBDViIgUmVnaW1lbkZpc2NhbD0iNjAxIi8+CiAgICA8Y2ZkaTpSZWNlcHRvciBSZmM9IkdDVDE2MTIxOUpWQSIgTm9tYnJlPSJHUlVQTyBDT01FUkNJQUwgVFJaIElOVEVSTkFDSU9OQUwgU0EgREUgQ1YiIFVzb0NGREk9IlAwMSIvPgogICAgPGNmZGk6Q29uY2VwdG9zPgogICAgICAgIDxjZmRpOkNvbmNlcHRvIENsYXZlUHJvZFNlcnY9Ijg0MTExNTA2IiBDYW50aWRhZD0iMSIgQ2xhdmVVbmlkYWQ9IkFDVCIgRGVzY3JpcGNpb249IlBhZ28iIFZhbG9yVW5pdGFyaW89IjAiIEltcG9ydGU9IjAiLz4KICAgIDwvY2ZkaTpDb25jZXB0b3M+CiAgICA8Y2ZkaTpDb21wbGVtZW50bz4KICAgICAgICA8cGFnbzIwOlBhZ29zIFZlcnNpb249IjEuMCI+CiAgICAgICAgICAgIDxwYWdvMjA6UGFnbyBGZWNoYVBhZ289IjIwMjItMDYtMTBUMTI6MDA6MDAiIEZvcm1hRGVQYWdvUD0iMDMiIE1vbmVkYVA9Ik1YTiIgTW9udG89IjgyMzA4Ljk2IiBSZmNFbWlzb3JDdGFPcmQ9IkJOTTg0MDUxNVZCMSIgQ3RhT3JkZW5hbnRlPSIwMDAwMDAwNzAxMTEyNjM4NzQiIFJmY0VtaXNvckN0YUJlbj0iQk5NODQwNTE1VkIxIiBDdGFCZW5lZmljaWFyaW89IjAwMDc2NjI5NjQiPgogICAgICAgICAgICAgICAgPHBhZ28yMDpEb2N0b1JlbGFjaW9uYWRvIElkRG9jdW1lbnRvPSIwNmI3ZjIwNS03MGU3LTQwODQtYjg4MS04M2VlYTIyYWNiNmYiIFNlcmllPSJSSSIgRm9saW89IjkyODA5IiBNb25lZGFEUj0iTVhOIiBNZXRvZG9EZVBhZ29EUj0iUFBEIiBOdW1QYXJjaWFsaWRhZD0iMSIgSW1wU2FsZG9BbnQ9IjI1NTc4Ljg3IiBJbXBQYWdhZG89IjI1NTc4Ljg3IiBJbXBTYWxkb0luc29sdXRvPSIwLjAwIi8+CiAgICAgICAgICAgICAgICA8cGFnbzEwOkRvY3RvUmVsYWNpb25hZG8gSWREb2N1bWVudG89IjMxNTM1NjE2LTUxZGUtNDUwZC1iN2M5LWMxNjk1MmYxMjMyYyIgU2VyaWU9IlJJIiBGb2xpbz0iOTI4MDgiIE1vbmVkYURSPSJNWE4iIE1ldG9kb0RlUGFnb0RSPSJQUEQiIE51bVBhcmNpYWxpZGFkPSIxIiBJbXBTYWxkb0FudD0iNDg1MTcuMjkiIEltcFBhZ2Fkbz0iNDg1MTcuMjkiIEltcFNhbGRvSW5zb2x1dG89IjAuMDAiLz4KICAgICAgICAgICAgICAgIDxwYWdvMTA6RG9jdG9SZWxhY2lvbmFkbyBJZERvY3VtZW50bz0iMzdhYzE3ODAtYWMxYS00YjY3LWFkNjUtYzkzZDRiY2NiMDc5IiBTZXJpZT0iUkkiIEZvbGlvPSI5MjgwNyIgTW9uZWRhRFI9Ik1YTiIgTWV0b2RvRGVQYWdvRFI9IlBQRCIgTnVtUGFyY2lhbGlkYWQ9IjEiIEltcFNhbGRvQW50PSI0MTA2LjQwIiBJbXBQYWdhZG89IjQxMDYuNDAiIEltcFNhbGRvSW5zb2x1dG89IjAuMDAiLz4KICAgICAgICAgICAgICAgIDxwYWdvMTA6RG9jdG9SZWxhY2lvbmFkbyBJZERvY3VtZW50bz0iNmM4MjQ5ZGUtNjkyNS00OTdkLWI4OGMtOTFhNjdkMjM2OTg4IiBTZXJpZT0iUkkiIEZvbGlvPSI5MjgwNiIgTW9uZWRhRFI9Ik1YTiIgTWV0b2RvRGVQYWdvRFI9IlBQRCIgTnVtUGFyY2lhbGlkYWQ9IjEiIEltcFNhbGRvQW50PSI0MTA2LjQwIiBJbXBQYWdhZG89IjQxMDYuNDAiIEltcFNhbGRvSW5zb2x1dG89IjAuMDAiLz4KICAgICAgICAgICAgPC9wYWdvMjA6UGFnbz4KICAgICAgICA8L3BhZ28yMDpQYWdvcz4KICAgICAgICA8dGZkOlRpbWJyZUZpc2NhbERpZ2l0YWwgCiAgICAgICAgICAgIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL3d3dy5zYXQuZ29iLm14L1RpbWJyZUZpc2NhbERpZ2l0YWwgaHR0cDovL3d3dy5zYXQuZ29iLm14L3NpdGlvX2ludGVybmV0L2NmZC9UaW1icmVGaXNjYWxEaWdpdGFsL1RpbWJyZUZpc2NhbERpZ2l0YWx2MTEueHNkIiAKICAgICAgICAgICAgVmVyc2lvbj0iMS4xIiAKICAgICAgICAgICAgVVVJRD0iZmM0NTA5ODQtNjI2NS00OWNlLTljNTktMzk1OGU5NDE3NDdkIiAKICAgICAgICAgICAgRmVjaGFUaW1icmFkbz0iMjAyMi0wNi0xNFQxNjoxOTozMSIgCiAgICAgICAgICAgIFJmY1Byb3ZDZXJ0aWY9IkxTTzEzMDYxODlSNSIgCiAgICAgICAgICAgIFNlbGxvQ0ZEPSJLc3Nrdm1tUXd0V0NZT1lIZUMwRjVFd0Z5Q24xeUJ1KzNrVG9YdThrbHcwMERRdDY2M2RMeG9HaUlleFlTbnBuTERLY1h6ZnZsWTNCd010cGw1SDZiN0pjT1FneUxOK0sxVTREd2JHRS9EV0hLVnBOTWpLaWYxaTdZN0FqRnByZGNhSzg2NVVacWhUdHFJK0Y4YTZEUGp5Yk10NmdlUkRUdHhURC9jdG8yU1FMcXV1NmZWL1NHVjI2bGpnSzFRd0tDOEt3MkdTNWdicDMyVEFIeVhEUjZkOENWLzRNdndKNHRxaEZhc2trdkprOHFtN3NMUlJ5MG5PVmliK0RQQVFCYktKVS83dG9FWGVienpRUm1aQ0dscU1ZVDdkWXlPbkhIcjIzeEVTTE85NHBMMXhtRTdjcUg5UCtMTWNVWTY0WkxxTkd3TStNUFcva3gzMmVIYUNIV3c9PSIgCiAgICAgICAgICAgIE5vQ2VydGlmaWNhZG9TQVQ9IjAwMDAxMDAwMDAwNTA5ODQ2NjYzIiAKICAgICAgICAgICAgU2VsbG9TQVQ9Imo2eWw4SFlrS2ZmbHFJKy93aTZGc0t4QzNXRFg0N09NZythT0N2aTBZdkdmMGFMazRhenlIWEF3L3VzT0NLaG52N2dzemZMRDJ3cTJCR2YzNUY0ZVhQLy8wN2t4aU56ZlJtZ0NsNmNNUVYreFhxL05pL2tNKzlVbDlUbTQ3eko5Mml1ZHNYUS8vK3kvbEtEMXNWTjlHc0dZODVERjNQWEVXWW5MMm54cFZKcWFjWE9VOExqemcyMGxjd0dYZUxZTExacmcyR2Q4RzBKaTRRUjBzZFZ5VTU3d0ZYN1hoZCtRSE5DeW9SM2RqUTlaNDZMOGdrelRMa0QwbStrTHJtRWJDdE9pNk9IRDlvRjlGc2liRlhXQTc3TmNPSFFteWoyenE5VzFROTEyaWJoOFltck53RFErMGpyc05WV09IZHhpKzhhK3FpTjBWdVBXRmYvQ1NoWkpnUT09IiAKICAgICAgICAgICAgeG1sbnM6dGZkPSJodHRwOi8vd3d3LnNhdC5nb2IubXgvVGltYnJlRmlzY2FsRGlnaXRhbCIgCiAgICAgICAgICAgIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIC8+CiAgICA8L2NmZGk6Q29tcGxlbWVudG8+CjwvY2ZkaTpDb21wcm9iYW50ZT4=" 
var xmlPagos2 = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPGNmZGk6Q29tcHJvYmFudGUgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vd3d3LnNhdC5nb2IubXgvY2ZkLzQgaHR0cDovL3d3dy5zYXQuZ29iLm14L3NpdGlvX2ludGVybmV0L2NmZC80L2NmZHY0MC54c2QgaHR0cDovL3d3dy5zYXQuZ29iLm14L1BhZ29zMjAgCiBodHRwOi8vd3d3LnNhdC5nb2IubXgvc2l0aW9faW50ZXJuZXQvY2ZkL1BhZ29zL1BhZ29zMjAueHNkIiB4bWxuczpwYWdvMjA9Imh0dHA6Ly93d3cuc2F0LmdvYi5teC9QYWdvczIwIiBWZXJzaW9uPSI0LjAiIFNlcmllPSJTZXJpZSIgRm9saW89IkZvbGlvIiBGZWNoYT0iMjAyMi0wNi0wNlQwOTowMDowMCIgU2VsbG89ImUiIFN1YlRvdGFsPSIwIiBNb25lZGE9IlhYWCIgVG90YWw9IjAuMDAiIFRpcG9EZUNvbXByb2JhbnRlPSJQIiBFeHBvcnRhY2lvbj0iMDEiIEx1Z2FyRXhwZWRpY2lvbj0iMjAwMDAiIHhtbG5zOmNmZGk9Imh0dHA6Ly93d3cuc2F0LmdvYi5teC9jZmQvNCIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSI+CiAgICA8Y2ZkaTpFbWlzb3IgUmZjPSJFS1U5MDAzMTczQzkiIE5vbWJyZT0iRVNDVUVMQSBLRU1QRVIgVVJHQVRFIiBSZWdpbWVuRmlzY2FsPSI2MDEiIC8+CiAgICA8Y2ZkaTpSZWNlcHRvciBSZmM9IlVSRTE4MDQyOVRNNiIgTm9tYnJlPSJVTklWRVJTSURBRCBST0JPVElDQSBFU1BBw5FPTEEiIERvbWljaWxpb0Zpc2NhbFJlY2VwdG9yPSI2NTAwMCIgUmVnaW1lbkZpc2NhbFJlY2VwdG9yPSI2MDEiIFVzb0NGREk9IkNQMDEiIC8+CiAgICA8Y2ZkaTpDb25jZXB0b3M+CiAgICAgICAgPGNmZGk6Q29uY2VwdG8gQ2xhdmVQcm9kU2Vydj0iODQxMTE1MDYiIENhbnRpZGFkPSIxIiBDbGF2ZVVuaWRhZD0iQUNUIiBEZXNjcmlwY2lvbj0iUGFnbyIgVmFsb3JVbml0YXJpbz0iMCIgSW1wb3J0ZT0iMCIgT2JqZXRvSW1wPSIwMSIgLz4KICAgIDwvY2ZkaTpDb25jZXB0b3M+CiAgICA8Y2ZkaTpDb21wbGVtZW50bz4KICAgICAgICA8cGFnbzIwOlBhZ29zIFZlcnNpb249IjIuMCI+CiAgICAgICAgICAgIDxwYWdvMjA6VG90YWxlcyBNb250b1RvdGFsUGFnb3M9IjEwMC4wMCIgVG90YWxSZXRlbmNpb25lc0lWQT0iMTYuMDAiIFRvdGFsUmV0ZW5jaW9uZXNJRVBTPSIzNC40MCIgVG90YWxSZXRlbmNpb25lc0lTUj0iMzUuMDAiLz4KICAgICAgICAgICAgPHBhZ28yMDpQYWdvIEZlY2hhUGFnbz0iMjAyMi0wNi0wNlQwMDowMDowMCIgRm9ybWFEZVBhZ29QPSIwMSIgTW9uZWRhUD0iTVhOIiBNb250bz0iMTAwLjAwIiBUaXBvQ2FtYmlvUD0iMSI+CiAgICAgICAgICAgICAgICA8cGFnbzIwOkRvY3RvUmVsYWNpb25hZG8gSWREb2N1bWVudG89ImJmYzM2NTIyLTRiOGUtNDVjNC04ZjE0LWQxMWIyODlmOWViNyIgTW9uZWRhRFI9Ik1YTiIgTnVtUGFyY2lhbGlkYWQ9IjEiIEltcFNhbGRvQW50PSIxMDAuMDAiIEltcFBhZ2Fkbz0iMTAwLjAwIiBJbXBTYWxkb0luc29sdXRvPSIwLjAwIiBPYmpldG9JbXBEUj0iMDIiIEVxdWl2YWxlbmNpYURSPSIxIj4KICAgICAgICAgICAgICAgICAgPHBhZ28yMDpJbXB1ZXN0b3NEUj4KICAgICAgICAgICAgICAgICAgICA8cGFnbzIwOlJldGVuY2lvbmVzRFI+CiAgICAgICAgICAgICAgICAgICAgICA8cGFnbzIwOlJldGVuY2lvbkRSIEJhc2VEUj0iMTAwLjAwIiBJbXB1ZXN0b0RSPSIwMDEiIFRpcG9GYWN0b3JEUj0iVGFzYSIgVGFzYU9DdW90YURSPSIwLjAwMDAwMCIgSW1wb3J0ZURSPSIwMC4wMCIgLz4KICAgICAgICAgICAgICAgICAgICAgIDxwYWdvMjA6UmV0ZW5jaW9uRFIgQmFzZURSPSIxMDAuMDAiIEltcHVlc3RvRFI9IjAwMSIgVGlwb0ZhY3RvckRSPSJUYXNhIiBUYXNhT0N1b3RhRFI9IjAuMzUwMDAwIiBJbXBvcnRlRFI9IjM1LjAwIiAvPgogICAgICAgICAgICAgICAgICAgICAgPHBhZ28yMDpSZXRlbmNpb25EUiBCYXNlRFI9IjEwMC4wMCIgSW1wdWVzdG9EUj0iMDAyIiBUaXBvRmFjdG9yRFI9IlRhc2EiIFRhc2FPQ3VvdGFEUj0iMC4wMDAwMDAiIEltcG9ydGVEUj0iMC4wMCIgLz4KICAgICAgICAgICAgICAgICAgICAgIDxwYWdvMjA6UmV0ZW5jaW9uRFIgQmFzZURSPSIxMDAuMDAiIEltcHVlc3RvRFI9IjAwMiIgVGlwb0ZhY3RvckRSPSJUYXNhIiBUYXNhT0N1b3RhRFI9IjAuMTYwMDAwIiBJbXBvcnRlRFI9IjE2LjAwIiAvPgogICAgICAgICAgICAgICAgICAgICAgPHBhZ28yMDpSZXRlbmNpb25EUiBCYXNlRFI9IjEwMC4wMCIgSW1wdWVzdG9EUj0iMDAzIiBUaXBvRmFjdG9yRFI9IkN1b3RhIiBUYXNhT0N1b3RhRFI9IjAuMDAwMDAwIiBJbXBvcnRlRFI9IjAuMDAiIC8+CiAgICAgICAgICAgICAgICAgICAgICA8cGFnbzIwOlJldGVuY2lvbkRSIEJhc2VEUj0iMTAwLjAwIiBJbXB1ZXN0b0RSPSIwMDMiIFRpcG9GYWN0b3JEUj0iVGFzYSIgVGFzYU9DdW90YURSPSIwLjMwNDAwMCIgSW1wb3J0ZURSPSIzMC40MCIgLz4KICAgICAgICAgICAgICAgICAgICAgIDxwYWdvMjA6UmV0ZW5jaW9uRFIgQmFzZURSPSIxMDAuMDAiIEltcHVlc3RvRFI9IjAwMyIgVGlwb0ZhY3RvckRSPSJDdW90YSIgVGFzYU9DdW90YURSPSIwLjA0MDAwMCIgSW1wb3J0ZURSPSI0LjAwIiAvPgogICAgICAgICAgICAgICAgICAgIDwvcGFnbzIwOlJldGVuY2lvbmVzRFI+CiAgICAgICAgICAgICAgICAgIDwvcGFnbzIwOkltcHVlc3Rvc0RSPgogICAgICAgICAgICAgICAgPC9wYWdvMjA6RG9jdG9SZWxhY2lvbmFkbz4KICAgICAgICAgICAgICAgIDxwYWdvMjA6SW1wdWVzdG9zUD4KICAgICAgICAgICAgICAgICAgPHBhZ28yMDpSZXRlbmNpb25lc1A+CiAgICAgICAgICAgICAgICAgICAgPHBhZ28yMDpSZXRlbmNpb25QIEltcHVlc3RvUD0iMDAxIiBJbXBvcnRlUD0iMzUuMDAiIC8+CiAgICAgICAgICAgICAgICAgICAgPHBhZ28yMDpSZXRlbmNpb25QIEltcHVlc3RvUD0iMDAyIiBJbXBvcnRlUD0iMTYuMDAiIC8+CiAgICAgICAgICAgICAgICAgICAgPHBhZ28yMDpSZXRlbmNpb25QIEltcHVlc3RvUD0iMDAzIiBJbXBvcnRlUD0iMzQuNDAiIC8+CiAgICAgICAgICAgICAgICAgIDwvcGFnbzIwOlJldGVuY2lvbmVzUD4KICAgICAgICAgICAgICAgIDwvcGFnbzIwOkltcHVlc3Rvc1A+CiAgICAgICAgICAgIDwvcGFnbzIwOlBhZ28+CiAgICAgICAgPC9wYWdvMjA6UGFnb3M+CiAgICAgICAgPHRmZDpUaW1icmVGaXNjYWxEaWdpdGFsIAogICAgICAgICAgICB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly93d3cuc2F0LmdvYi5teC9UaW1icmVGaXNjYWxEaWdpdGFsIGh0dHA6Ly93d3cuc2F0LmdvYi5teC9zaXRpb19pbnRlcm5ldC9jZmQvVGltYnJlRmlzY2FsRGlnaXRhbC9UaW1icmVGaXNjYWxEaWdpdGFsdjExLnhzZCIgCiAgICAgICAgICAgIFZlcnNpb249IjEuMSIgCiAgICAgICAgICAgIFVVSUQ9ImZjNDUwOTg0LTYyNjUtNDljZS05YzU5LTM5NThlOTQxNzQ3ZCIgCiAgICAgICAgICAgIEZlY2hhVGltYnJhZG89IjIwMjItMDYtMTRUMTY6MTk6MzEiIAogICAgICAgICAgICBSZmNQcm92Q2VydGlmPSJMU08xMzA2MTg5UjUiIAogICAgICAgICAgICBTZWxsb0NGRD0iS3Nza3ZtbVF3dFdDWU9ZSGVDMEY1RXdGeUNuMXlCdSsza1RvWHU4a2x3MDBEUXQ2NjNkTHhvR2lJZXhZU25wbkxES2NYemZ2bFkzQndNdHBsNUg2YjdKY09RZ3lMTitLMVU0RHdiR0UvRFdIS1ZwTk1qS2lmMWk3WTdBakZwcmRjYUs4NjVVWnFoVHRxSStGOGE2RFBqeWJNdDZnZVJEVHR4VEQvY3RvMlNRTHF1dTZmVi9TR1YyNmxqZ0sxUXdLQzhLdzJHUzVnYnAzMlRBSHlYRFI2ZDhDVi80TXZ3SjR0cWhGYXNra3ZKazhxbTdzTFJSeTBuT1ZpYitEUEFRQmJLSlUvN3RvRVhlYnp6UVJtWkNHbHFNWVQ3ZFl5T25ISHIyM3hFU0xPOTRwTDF4bUU3Y3FIOVArTE1jVVk2NFpMcU5Hd00rTVBXL2t4MzJlSGFDSFd3PT0iIAogICAgICAgICAgICBOb0NlcnRpZmljYWRvU0FUPSIwMDAwMTAwMDAwMDUwOTg0NjY2MyIgCiAgICAgICAgICAgIFNlbGxvU0FUPSJqNnlsOEhZa0tmZmxxSSsvd2k2RnNLeEMzV0RYNDdPTWcrYU9DdmkwWXZHZjBhTGs0YXp5SFhBdy91c09DS2hudjdnc3pmTEQyd3EyQkdmMzVGNGVYUC8vMDdreGlOemZSbWdDbDZjTVFWK3hYcS9OaS9rTSs5VWw5VG00N3pKOTJpdWRzWFEvLyt5L2xLRDFzVk45R3NHWTg1REYzUFhFV1luTDJueHBWSnFhY1hPVThManpnMjBsY3dHWGVMWUxMWnJnMkdkOEcwSmk0UVIwc2RWeVU1N3dGWDdYaGQrUUhOQ3lvUjNkalE5WjQ2TDhna3pUTGtEMG0ra0xybUViQ3RPaTZPSEQ5b0Y5RnNpYkZYV0E3N05jT0hRbXlqMnpxOVcxUTkxMmliaDhZbXJOd0RRKzBqcnNOVldPSGR4aSs4YStxaU4wVnVQV0ZmL0NTaFpKZ1E9PSIgCiAgICAgICAgICAgIHhtbG5zOnRmZD0iaHR0cDovL3d3dy5zYXQuZ29iLm14L1RpbWJyZUZpc2NhbERpZ2l0YWwiIAogICAgICAgICAgICB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiAvPgogICAgPC9jZmRpOkNvbXBsZW1lbnRvPgo8L2NmZGk6Q29tcHJvYmFudGU+"
var xmlTraslado = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPGNmZGk6Q29tcHJvYmFudGUgeG1sbnM6Y2ZkaT0iaHR0cDovL3d3dy5zYXQuZ29iLm14L2NmZC8zIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly93d3cuc2F0LmdvYi5teC9jZmQvMyBodHRwOi8vd3d3LnNhdC5nb2IubXgvc2l0aW9faW50ZXJuZXQvY2ZkLzMvY2ZkdjMzLnhzZCIgVmVyc2lvbj0iMy4zIiBTZXJpZT0iVEkiIEZvbGlvPSIyMjUwIiBGZWNoYT0iMjAyMi0wNi0wNlQxMjozOTo1MyIgU2VsbG89IiIgTm9DZXJ0aWZpY2Fkbz0iIiBDZXJ0aWZpY2Fkbz0iIiBTdWJUb3RhbD0iMC4wMCIgTW9uZWRhPSJNWE4iIFRpcG9DYW1iaW89IjEiIFRvdGFsPSIwLjAwIiBUaXBvRGVDb21wcm9iYW50ZT0iVCIgTHVnYXJFeHBlZGljaW9uPSI2NDk4OCI+Cgk8Y2ZkaTpFbWlzb3IgUmZjPSJJUE02MjAzMjI2QjQiIE5vbWJyZT0iSVRXIFBvbHltZXggUyBERSBSTCBERSBDViIgUmVnaW1lbkZpc2NhbD0iNjAxIi8+Cgk8Y2ZkaTpSZWNlcHRvciBSZmM9IklQTTYyMDMyMjZCNCIgTm9tYnJlPSJJVFcgUG9seW1leCAtIERpc3RyaWJ1dGlvbiIgVXNvQ0ZEST0iUDAxIi8+Cgk8Y2ZkaTpDb25jZXB0b3M+CgkJPGNmZGk6Q29uY2VwdG8gQ2xhdmVQcm9kU2Vydj0iMzEyMDE2MDciIE5vSWRlbnRpZmljYWNpb249IlI1LTQ1IiBDYW50aWRhZD0iNTIwIiBDbGF2ZVVuaWRhZD0iWDRHIiBVbmlkYWQ9IkNBIiBEZXNjcmlwY2lvbj0iUExBU1RJQUNFUk8gNSBNSU4gTElRLiAyNU1MIiBWYWxvclVuaXRhcmlvPSIwLjAwIiBJbXBvcnRlPSIwLjAwIiAvPgoJCTxjZmRpOkNvbmNlcHRvIENsYXZlUHJvZFNlcnY9IjE1MTIxODA3IiBOb0lkZW50aWZpY2FjaW9uPSJBUFY2MCIgQ2FudGlkYWQ9IjYyNCIgQ2xhdmVVbmlkYWQ9Ilg0RyIgVW5pZGFkPSJDQSIgRGVzY3JpcGNpb249IkFOVElDT05HRUxBTlRFIFJFRiBMUFUgUVRGIEdBTCIgVmFsb3JVbml0YXJpbz0iMC4wMCIgSW1wb3J0ZT0iMC4wMCIgLz4KCQk8Y2ZkaTpDb25jZXB0byBDbGF2ZVByb2RTZXJ2PSIzMTIwMTYzMiIgTm9JZGVudGlmaWNhY2lvbj0iNy1HIiBDYW50aWRhZD0iMTgyIiBDbGF2ZVVuaWRhZD0iWDRHIiBVbmlkYWQ9IkNBIiBEZXNjcmlwY2lvbj0iU0lMSUNPTiBTVVBFUiBHUkVZIDg1RyBDQUpJVEEiIFZhbG9yVW5pdGFyaW89IjAuMDAiIEltcG9ydGU9IjAuMDAiIC8+CgkJPGNmZGk6Q29uY2VwdG8gQ2xhdmVQcm9kU2Vydj0iMzEyMDE2MzIiIE5vSWRlbnRpZmljYWNpb249IkMtUUpUIiBDYW50aWRhZD0iNzIiIENsYXZlVW5pZGFkPSJYNEciIFVuaWRhZD0iQ0EiIERlc2NyaXBjaW9uPSJDQVJUVUNITyBKVU5UQUZMRVggVFJBTlMgMjgwTUwiIFZhbG9yVW5pdGFyaW89IjAuMDAiIEltcG9ydGU9IjAuMDAiIC8+CgkJPGNmZGk6Q29uY2VwdG8gQ2xhdmVQcm9kU2Vydj0iNDcxMzE4MDkiIE5vSWRlbnRpZmljYWNpb249IlRGQy0yNTAiIENhbnRpZGFkPSI5MCIgQ2xhdmVVbmlkYWQ9Ilg0RyIgVW5pZGFkPSJDQSIgRGVzY3JpcGNpb249IlRJTlRBIEZMRVhPIENBRkUgMjUwTUwiIFZhbG9yVW5pdGFyaW89IjAuMDAiIEltcG9ydGU9IjAuMDAiIC8+CgkJPGNmZGk6Q29uY2VwdG8gQ2xhdmVQcm9kU2Vydj0iNDcxMzE4MTQiIE5vSWRlbnRpZmljYWNpb249IjExMTEyNCIgQ2FudGlkYWQ9IjEwMCIgQ2xhdmVVbmlkYWQ9Ilg0RyIgVW5pZGFkPSJDQSIgRGVzY3JpcGNpb249IkNFUkEgTElRLiBBVVRPIEFDUklMSUNBIDQ3M01MIiBWYWxvclVuaXRhcmlvPSIwLjAwIiBJbXBvcnRlPSIwLjAwIiAvPgoJCTxjZmRpOkNvbmNlcHRvIENsYXZlUHJvZFNlcnY9IjMxMjAxNjEyIiBOb0lkZW50aWZpY2FjaW9uPSIzLUQiIENhbnRpZGFkPSI1MCIgQ2xhdmVVbmlkYWQ9Ilg0RyIgVW5pZGFkPSJDQSIgRGVzY3JpcGNpb249IkZPUk1BLUEtR0FTS0VUIiBWYWxvclVuaXRhcmlvPSIwLjAwIiBJbXBvcnRlPSIwLjAwIiAvPgoJCTxjZmRpOkNvbmNlcHRvIENsYXZlUHJvZFNlcnY9IjMxMjAxNjEyIiBOb0lkZW50aWZpY2FjaW9uPSIzLUQiIENhbnRpZGFkPSI0MyIgQ2xhdmVVbmlkYWQ9Ilg0RyIgVW5pZGFkPSJDQSIgRGVzY3JpcGNpb249IkZPUk1BLUEtR0FTS0VUIiBWYWxvclVuaXRhcmlvPSIwLjAwIiBJbXBvcnRlPSIwLjAwIiAvPgoJCTxjZmRpOkNvbmNlcHRvIENsYXZlUHJvZFNlcnY9IjMwMTIxNjAyIiBOb0lkZW50aWZpY2FjaW9uPSIyNC1BIiBDYW50aWRhZD0iOTgiIENsYXZlVW5pZGFkPSJYNEciIFVuaWRhZD0iQ0EiIERlc2NyaXBjaW9uPSJBTlRJREVSUkFQQU5URSAgUEJBTkRBUyAxMDBHIiBWYWxvclVuaXRhcmlvPSIwLjAwIiBJbXBvcnRlPSIwLjAwIiAvPgoJCTxjZmRpOkNvbmNlcHRvIENsYXZlUHJvZFNlcnY9IjMxMjAxNjA3IiBOb0lkZW50aWZpY2FjaW9uPSJSMS01NiIgQ2FudGlkYWQ9IjkxIiBDbGF2ZVVuaWRhZD0iWDRHIiBVbmlkYWQ9IkNBIiBEZXNjcmlwY2lvbj0iUExBU1RJQUNFUk8gTk9STUFMIDcwRyIgVmFsb3JVbml0YXJpbz0iMC4wMCIgSW1wb3J0ZT0iMC4wMCIgLz4KCQk8Y2ZkaTpDb25jZXB0byBDbGF2ZVByb2RTZXJ2PSI0NzEzMTgxNCIgTm9JZGVudGlmaWNhY2lvbj0iMTExMTI0IiBDYW50aWRhZD0iMjIwIiBDbGF2ZVVuaWRhZD0iWDRHIiBVbmlkYWQ9IkNBIiBEZXNjcmlwY2lvbj0iQ0VSQSBMSVEuIEFVVE8gQUNSSUxJQ0EgNDczTUwiIFZhbG9yVW5pdGFyaW89IjAuMDAiIEltcG9ydGU9IjAuMDAiIC8+Cgk8L2NmZGk6Q29uY2VwdG9zPgoJPGNmZGk6Q29tcGxlbWVudG8+CiAgICAgICAgPHRmZDpUaW1icmVGaXNjYWxEaWdpdGFsIAogICAgICAgICAgICB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly93d3cuc2F0LmdvYi5teC9UaW1icmVGaXNjYWxEaWdpdGFsIGh0dHA6Ly93d3cuc2F0LmdvYi5teC9zaXRpb19pbnRlcm5ldC9jZmQvVGltYnJlRmlzY2FsRGlnaXRhbC9UaW1icmVGaXNjYWxEaWdpdGFsdjExLnhzZCIgCiAgICAgICAgICAgIFZlcnNpb249IjEuMSIgCiAgICAgICAgICAgIFVVSUQ9ImZjNDUwOTg0LTYyNjUtNDljZS05YzU5LTM5NThlOTQxNzQ3ZCIgCiAgICAgICAgICAgIEZlY2hhVGltYnJhZG89IjIwMjItMDYtMTRUMTY6MTk6MzEiIAogICAgICAgICAgICBSZmNQcm92Q2VydGlmPSJMU08xMzA2MTg5UjUiIAogICAgICAgICAgICBTZWxsb0NGRD0iS3Nza3ZtbVF3dFdDWU9ZSGVDMEY1RXdGeUNuMXlCdSsza1RvWHU4a2x3MDBEUXQ2NjNkTHhvR2lJZXhZU25wbkxES2NYemZ2bFkzQndNdHBsNUg2YjdKY09RZ3lMTitLMVU0RHdiR0UvRFdIS1ZwTk1qS2lmMWk3WTdBakZwcmRjYUs4NjVVWnFoVHRxSStGOGE2RFBqeWJNdDZnZVJEVHR4VEQvY3RvMlNRTHF1dTZmVi9TR1YyNmxqZ0sxUXdLQzhLdzJHUzVnYnAzMlRBSHlYRFI2ZDhDVi80TXZ3SjR0cWhGYXNra3ZKazhxbTdzTFJSeTBuT1ZpYitEUEFRQmJLSlUvN3RvRVhlYnp6UVJtWkNHbHFNWVQ3ZFl5T25ISHIyM3hFU0xPOTRwTDF4bUU3Y3FIOVArTE1jVVk2NFpMcU5Hd00rTVBXL2t4MzJlSGFDSFd3PT0iIAogICAgICAgICAgICBOb0NlcnRpZmljYWRvU0FUPSIwMDAwMTAwMDAwMDUwOTg0NjY2MyIgCiAgICAgICAgICAgIFNlbGxvU0FUPSJqNnlsOEhZa0tmZmxxSSsvd2k2RnNLeEMzV0RYNDdPTWcrYU9DdmkwWXZHZjBhTGs0YXp5SFhBdy91c09DS2hudjdnc3pmTEQyd3EyQkdmMzVGNGVYUC8vMDdreGlOemZSbWdDbDZjTVFWK3hYcS9OaS9rTSs5VWw5VG00N3pKOTJpdWRzWFEvLyt5L2xLRDFzVk45R3NHWTg1REYzUFhFV1luTDJueHBWSnFhY1hPVThManpnMjBsY3dHWGVMWUxMWnJnMkdkOEcwSmk0UVIwc2RWeVU1N3dGWDdYaGQrUUhOQ3lvUjNkalE5WjQ2TDhna3pUTGtEMG0ra0xybUViQ3RPaTZPSEQ5b0Y5RnNpYkZYV0E3N05jT0hRbXlqMnpxOVcxUTkxMmliaDhZbXJOd0RRKzBqcnNOVldPSGR4aSs4YStxaU4wVnVQV0ZmL0NTaFpKZ1E9PSIgCiAgICAgICAgICAgIHhtbG5zOnRmZD0iaHR0cDovL3d3dy5zYXQuZ29iLm14L1RpbWJyZUZpc2NhbERpZ2l0YWwiIAogICAgICAgICAgICB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiAvPgogICAgPC9jZmRpOkNvbXBsZW1lbnRvPgo8L2NmZGk6Q29tcHJvYmFudGU+"
var xmlNotaCredito = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPGNmZGk6Q29tcHJvYmFudGUgeG1sbnM6Y2ZkaT0iaHR0cDovL3d3dy5zYXQuZ29iLm14L2NmZC8zIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly93d3cuc2F0LmdvYi5teC9jZmQvMyBodHRwOi8vd3d3LnNhdC5nb2IubXgvc2l0aW9faW50ZXJuZXQvY2ZkLzMvY2ZkdjMzLnhzZCIgVmVyc2lvbj0iMy4zIiBTZXJpZT0iUk0iIEZvbGlvPSI5MjM4IiBGZWNoYT0iMjAyMi0wNi0yM1QxNzo1MzozNSIgU2VsbG89IiIgRm9ybWFQYWdvPSI5OSIgTm9DZXJ0aWZpY2Fkbz0iIiBDZXJ0aWZpY2Fkbz0iIiBTdWJUb3RhbD0iMjk4MiIgTW9uZWRhPSJNWE4iIFRpcG9DYW1iaW89IjEiIFRvdGFsPSIzNDU5LjEyIiBUaXBvRGVDb21wcm9iYW50ZT0iRSIgTWV0b2RvUGFnbz0iUFVFIiBMdWdhckV4cGVkaWNpb249IjY0OTg4Ij4KPGNmZGk6Q2ZkaVJlbGFjaW9uYWRvcyBUaXBvUmVsYWNpb249IjAzIiA+CjxjZmRpOkNmZGlSZWxhY2lvbmFkbyAgVVVJRD0iYTcxMTVlYmQtZjc4OC00ZGVhLTkyNjAtYjliNjdlZjY2OTllIiAvPgo8L2NmZGk6Q2ZkaVJlbGFjaW9uYWRvcz4KCTxjZmRpOkVtaXNvciBSZmM9IklQTTYyMDMyMjZCNCIgTm9tYnJlPSJJVFcgUG9seW1leCBTIERFIFJMIERFIENWIiBSZWdpbWVuRmlzY2FsPSI2MDEiLz4KCTxjZmRpOlJlY2VwdG9yIFJmYz0iREVMOTEwMzAxVFk0IiBOb21icmU9IkRJU1RSSUJVSURPUkEgRUxWQSBTQSBERSBDViIgVXNvQ0ZEST0iRzAyIi8+Cgk8Y2ZkaTpDb25jZXB0b3M+CgkJPGNmZGk6Q29uY2VwdG8gQ2xhdmVQcm9kU2Vydj0iODQxMTE1MDYiIE5vSWRlbnRpZmljYWNpb249IlJFVFVSTlMwNiIgQ2FudGlkYWQ9IjEiIENsYXZlVW5pZGFkPSJBQ1QiIFVuaWRhZD0iQWN0aXZpZGFkIiBEZXNjcmlwY2lvbj0iREVWT0xVQ0lPTiA1IENBSkFTIEFNRi04NSIgVmFsb3JVbml0YXJpbz0iMjk4Mi4wMCIgSW1wb3J0ZT0iMjk4Mi4wMCIgPgoJCQk8Y2ZkaTpJbXB1ZXN0b3M+CgkJCTxjZmRpOlRyYXNsYWRvcz4KCQkJCTxjZmRpOlRyYXNsYWRvIEJhc2U9IjI5ODIuMDAiIEltcHVlc3RvPSIwMDIiIFRpcG9GYWN0b3I9IlRhc2EiIFRhc2FPQ3VvdGE9IjAuMTYwMDAwIiBJbXBvcnRlPSI0NzcuMTIiIC8+CgkJCTwvY2ZkaTpUcmFzbGFkb3M+CgkJCTwvY2ZkaTpJbXB1ZXN0b3M+CgkJPC9jZmRpOkNvbmNlcHRvPgoJPC9jZmRpOkNvbmNlcHRvcz4KCTxjZmRpOkltcHVlc3RvcyBUb3RhbEltcHVlc3Rvc1RyYXNsYWRhZG9zPSI0NzcuMTIiPgoJCTxjZmRpOlRyYXNsYWRvcz4KCQkJPGNmZGk6VHJhc2xhZG8gSW1wdWVzdG89IjAwMiIgVGlwb0ZhY3Rvcj0iVGFzYSIgVGFzYU9DdW90YT0iMC4xNjAwMDAiIEltcG9ydGU9IjQ3Ny4xMiIgLz4KCQk8L2NmZGk6VHJhc2xhZG9zPgoJPC9jZmRpOkltcHVlc3Rvcz4KCTxjZmRpOkNvbXBsZW1lbnRvPgogICAgICAgIDx0ZmQ6VGltYnJlRmlzY2FsRGlnaXRhbCAKICAgICAgICAgICAgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vd3d3LnNhdC5nb2IubXgvVGltYnJlRmlzY2FsRGlnaXRhbCBodHRwOi8vd3d3LnNhdC5nb2IubXgvc2l0aW9faW50ZXJuZXQvY2ZkL1RpbWJyZUZpc2NhbERpZ2l0YWwvVGltYnJlRmlzY2FsRGlnaXRhbHYxMS54c2QiIAogICAgICAgICAgICBWZXJzaW9uPSIxLjEiIAogICAgICAgICAgICBVVUlEPSJmYzQ1MDk4NC02MjY1LTQ5Y2UtOWM1OS0zOTU4ZTk0MTc0N2QiIAogICAgICAgICAgICBGZWNoYVRpbWJyYWRvPSIyMDIyLTA2LTE0VDE2OjE5OjMxIiAKICAgICAgICAgICAgUmZjUHJvdkNlcnRpZj0iTFNPMTMwNjE4OVI1IiAKICAgICAgICAgICAgU2VsbG9DRkQ9Iktzc2t2bW1Rd3RXQ1lPWUhlQzBGNUV3RnlDbjF5QnUrM2tUb1h1OGtsdzAwRFF0NjYzZEx4b0dpSWV4WVNucG5MREtjWHpmdmxZM0J3TXRwbDVINmI3SmNPUWd5TE4rSzFVNER3YkdFL0RXSEtWcE5NaktpZjFpN1k3QWpGcHJkY2FLODY1VVpxaFR0cUkrRjhhNkRQanliTXQ2Z2VSRFR0eFREL2N0bzJTUUxxdXU2ZlYvU0dWMjZsamdLMVF3S0M4S3cyR1M1Z2JwMzJUQUh5WERSNmQ4Q1YvNE12d0o0dHFoRmFza2t2Sms4cW03c0xSUnkwbk9WaWIrRFBBUUJiS0pVLzd0b0VYZWJ6elFSbVpDR2xxTVlUN2RZeU9uSEhyMjN4RVNMTzk0cEwxeG1FN2NxSDlQK0xNY1VZNjRaTHFOR3dNK01QVy9reDMyZUhhQ0hXdz09IiAKICAgICAgICAgICAgTm9DZXJ0aWZpY2Fkb1NBVD0iMDAwMDEwMDAwMDA1MDk4NDY2NjMiIAogICAgICAgICAgICBTZWxsb1NBVD0iajZ5bDhIWWtLZmZscUkrL3dpNkZzS3hDM1dEWDQ3T01nK2FPQ3ZpMFl2R2YwYUxrNGF6eUhYQXcvdXNPQ0tobnY3Z3N6ZkxEMndxMkJHZjM1RjRlWFAvLzA3a3hpTnpmUm1nQ2w2Y01RVit4WHEvTmkva00rOVVsOVRtNDd6SjkyaXVkc1hRLy8reS9sS0Qxc1ZOOUdzR1k4NURGM1BYRVdZbkwybnhwVkpxYWNYT1U4TGp6ZzIwbGN3R1hlTFlMTFpyZzJHZDhHMEppNFFSMHNkVnlVNTd3Rlg3WGhkK1FITkN5b1IzZGpROVo0Nkw4Z2t6VExrRDBtK2tMcm1FYkN0T2k2T0hEOW9GOUZzaWJGWFdBNzdOY09IUW15ajJ6cTlXMVE5MTJpYmg4WW1yTndEUSswanJzTlZXT0hkeGkrOGErcWlOMFZ1UFdGZi9DU2haSmdRPT0iIAogICAgICAgICAgICB4bWxuczp0ZmQ9Imh0dHA6Ly93d3cuc2F0LmdvYi5teC9UaW1icmVGaXNjYWxEaWdpdGFsIiAKICAgICAgICAgICAgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgLz4KICAgIDwvY2ZkaTpDb21wbGVtZW50bz4KPC9jZmRpOkNvbXByb2JhbnRlPgo="
var xmlComercioExterior = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPGNmZGk6Q29tcHJvYmFudGUgeG1sbnM6Y2ZkaT0iaHR0cDovL3d3dy5zYXQuZ29iLm14L2NmZC8zIgoJeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIKCXhtbG5zOmNjZTExPSJodHRwOi8vd3d3LnNhdC5nb2IubXgvQ29tZXJjaW9FeHRlcmlvcjExIiB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly93d3cuc2F0LmdvYi5teC9jZmQvMyBodHRwOi8vd3d3LnNhdC5nb2IubXgvc2l0aW9faW50ZXJuZXQvY2ZkLzMvY2ZkdjMzLnhzZCBodHRwOi8vd3d3LnNhdC5nb2IubXgvQ29tZXJjaW9FeHRlcmlvcjExIGh0dHA6Ly93d3cuc2F0LmdvYi5teC9pbmZvcm1hY2lvbl9maXNjYWwvZmFjdHVyYV9lbGVjdHJvbmljYS9Eb2N1bWVudHMvQ29tcGxlbWVudG9zY2ZkaS9Db21lcmNpb0V4dGVyaW9yMTEueHNkIiBWZXJzaW9uPSIzLjMiIFNlcmllPSJSSSIgRm9saW89Ijk0MDk5IiBGZWNoYT0iMjAyMi0wNi0wM1QxNjo0NzoxMSIgU2VsbG89IiIgRm9ybWFQYWdvPSIwMyIgTm9DZXJ0aWZpY2Fkbz0iIiBDZXJ0aWZpY2Fkbz0iIiBDb25kaWNpb25lc0RlUGFnbz0iUEFHTyBBTlRJQ0lQQURPIiBTdWJUb3RhbD0iMzEzNzEuMiIgTW9uZWRhPSJVU0QiIFRpcG9DYW1iaW89IjIwLjI5OTIwMCIgVG90YWw9IjMxMzcxLjIiIFRpcG9EZUNvbXByb2JhbnRlPSJJIiBNZXRvZG9QYWdvPSJQVUUiIEx1Z2FyRXhwZWRpY2lvbj0iNjQ5ODgiPgoJPGNmZGk6RW1pc29yIFJmYz0iSVBNNjIwMzIyNkI0IiBOb21icmU9IklUVyBQb2x5bWV4IFMgREUgUkwgREUgQ1YiIFJlZ2ltZW5GaXNjYWw9IjYwMSIvPgoJPGNmZGk6UmVjZXB0b3IgUmZjPSJYRVhYMDEwMTAxMDAwIiBOb21icmU9IlBFUk5PRlVMTCBTLlIuTCIgUmVzaWRlbmNpYUZpc2NhbD0iQk9MIiBOdW1SZWdJZFRyaWI9IjAwMjE2ODI0MDIyIiBVc29DRkRJPSJQMDEiLz4KCTxjZmRpOkNvbmNlcHRvcz4KCQk8Y2ZkaTpDb25jZXB0byBDbGF2ZVByb2RTZXJ2PSIxNTEyMTgwNyIgTm9JZGVudGlmaWNhY2lvbj0iQVBDNjAiIENhbnRpZGFkPSI5NTAiIENsYXZlVW5pZGFkPSJYNEciIFVuaWRhZD0iQ0EiIERlc2NyaXBjaW9uPSJBTlRJTkNPTkdFTEFOVEUgQ09OQy4gR0FMLiBQVFgiIFZhbG9yVW5pdGFyaW89IjI2LjQ0MDAiIEltcG9ydGU9IjI1MTE4LjAwIj4KCQkJPGNmZGk6SW1wdWVzdG9zPgoJCQkJPGNmZGk6VHJhc2xhZG9zPgoJCQkJCTxjZmRpOlRyYXNsYWRvIEJhc2U9IjI1MTE4LjAwIiBJbXB1ZXN0bz0iMDAyIiBUaXBvRmFjdG9yPSJUYXNhIiBUYXNhT0N1b3RhPSIwLjAwMDAwMCIgSW1wb3J0ZT0iMC4wMCIgLz4KCQkJCTwvY2ZkaTpUcmFzbGFkb3M+CgkJCTwvY2ZkaTpJbXB1ZXN0b3M+CgkJPC9jZmRpOkNvbmNlcHRvPgoJCTxjZmRpOkNvbmNlcHRvIENsYXZlUHJvZFNlcnY9IjE1MTIxODA3IiBOb0lkZW50aWZpY2FjaW9uPSJBUE82MCIgQ2FudGlkYWQ9IjkwIiBDbGF2ZVVuaWRhZD0iWDRHIiBVbmlkYWQ9IkNBIiBEZXNjcmlwY2lvbj0iQU5ULiBPUkdBTklDTyBMUFVTQVIgR0FMT04iIFZhbG9yVW5pdGFyaW89IjE5LjQ4MDAiIEltcG9ydGU9IjE3NTMuMjAiPgoJCQk8Y2ZkaTpJbXB1ZXN0b3M+CgkJCQk8Y2ZkaTpUcmFzbGFkb3M+CgkJCQkJPGNmZGk6VHJhc2xhZG8gQmFzZT0iMTc1My4yMCIgSW1wdWVzdG89IjAwMiIgVGlwb0ZhY3Rvcj0iVGFzYSIgVGFzYU9DdW90YT0iMC4wMDAwMDAiIEltcG9ydGU9IjAuMDAiIC8+CgkJCQk8L2NmZGk6VHJhc2xhZG9zPgoJCQk8L2NmZGk6SW1wdWVzdG9zPgoJCTwvY2ZkaTpDb25jZXB0bz4KCQk8Y2ZkaTpDb25jZXB0byBDbGF2ZVByb2RTZXJ2PSIzMTE5MTUwOSIgTm9JZGVudGlmaWNhY2lvbj0iMzEtQSIgQ2FudGlkYWQ9IjMwIiBDbGF2ZVVuaWRhZD0iWDRHIiBVbmlkYWQ9IkNBIiBEZXNjcmlwY2lvbj0iVkVMT0NJTCBET0JMRSBGT05ETyA1NEciIFZhbG9yVW5pdGFyaW89IjE1MC4wMDAwIiBJbXBvcnRlPSI0NTAwLjAwIj4KCQkJPGNmZGk6SW1wdWVzdG9zPgoJCQkJPGNmZGk6VHJhc2xhZG9zPgoJCQkJCTxjZmRpOlRyYXNsYWRvIEJhc2U9IjQ1MDAuMDAiIEltcHVlc3RvPSIwMDIiIFRpcG9GYWN0b3I9IlRhc2EiIFRhc2FPQ3VvdGE9IjAuMDAwMDAwIiBJbXBvcnRlPSIwLjAwIiAvPgoJCQkJPC9jZmRpOlRyYXNsYWRvcz4KCQkJPC9jZmRpOkltcHVlc3Rvcz4KCQk8L2NmZGk6Q29uY2VwdG8+Cgk8L2NmZGk6Q29uY2VwdG9zPgoJPGNmZGk6SW1wdWVzdG9zIFRvdGFsSW1wdWVzdG9zVHJhc2xhZGFkb3M9IjAiPgoJCTxjZmRpOlRyYXNsYWRvcz4KCQkJPGNmZGk6VHJhc2xhZG8gSW1wdWVzdG89IjAwMiIgVGlwb0ZhY3Rvcj0iVGFzYSIgVGFzYU9DdW90YT0iMC4wMDAwMDAiIEltcG9ydGU9IjAuMDAiIC8+CgkJPC9jZmRpOlRyYXNsYWRvcz4KCTwvY2ZkaTpJbXB1ZXN0b3M+Cgk8Y2ZkaTpDb21wbGVtZW50bz4KCQk8Y2NlMTE6Q29tZXJjaW9FeHRlcmlvciBWZXJzaW9uPSIxLjEiIFRpcG9PcGVyYWNpb249IjIiIENsYXZlRGVQZWRpbWVudG89IkExIiBDZXJ0aWZpY2Fkb09yaWdlbj0iMCIgSW5jb3Rlcm09IkZBUyIgU3ViZGl2aXNpb249IjAiIFRpcG9DYW1iaW9VU0Q9IjIwLjI5OTIwMCIgVG90YWxVU0Q9IjMxMzcxLjIwIj4KCQkJPGNjZTExOkVtaXNvcj4KCQkJCTxjY2UxMTpEb21pY2lsaW8gQ2FsbGU9IkNBUlJFVEVSQSBOQUNJT05BTCIgTnVtZXJvRXh0ZXJpb3I9Ijc4MjEiIENvbG9uaWE9IjA1NDYiIExvY2FsaWRhZD0iMDciIE11bmljaXBpbz0iMDM5IiBFc3RhZG89Ik5MRSIgUGFpcz0iTUVYIiBDb2RpZ29Qb3N0YWw9IjY0OTg4Ii8+CgkJCTwvY2NlMTE6RW1pc29yPgoJCQk8Y2NlMTE6UmVjZXB0b3I+CgkJCQk8Y2NlMTE6RG9taWNpbGlvIENhbGxlPSJBVkVOSURBIDEiIE51bWVyb0V4dGVyaW9yPSJOby4zIiBDb2xvbmlhPSJaT05BIFZJTExBIFJPU0FTIFBBTVBBIiBNdW5pY2lwaW89IkJPTElWSUEiIEVzdGFkbz0iTFAiIFBhaXM9IkJPTCIgQ29kaWdvUG9zdGFsPSIwMDAwMCIvPgoJCQk8L2NjZTExOlJlY2VwdG9yPgoJCQk8Y2NlMTE6TWVyY2FuY2lhcz4KCQkJCTxjY2UxMTpNZXJjYW5jaWEgTm9JZGVudGlmaWNhY2lvbj0iQVBDNjAiIEZyYWNjaW9uQXJhbmNlbGFyaWE9IjM4MjAwMDAxMDAiIENhbnRpZGFkQWR1YW5hPSIxNTM1Mi4wMCIgVW5pZGFkQWR1YW5hPSIwOCIgVmFsb3JVbml0YXJpb0FkdWFuYT0iMS42NCIgVmFsb3JEb2xhcmVzPSIyNTExOC4wMCI+CgkJCQkJPGNjZTExOkRlc2NyaXBjaW9uZXNFc3BlY2lmaWNhcyBNYXJjYT0iUEVSTUFURVgiIE1vZGVsbz0iQU5USUNPTkdFTEFOVEVTIiBTdWJNb2RlbG89IlBST0RVQ1RPIFBBUkEgUkFESUFET1IiIC8+CgkJCQk8L2NjZTExOk1lcmNhbmNpYT4KCQkJCTxjY2UxMTpNZXJjYW5jaWEgTm9JZGVudGlmaWNhY2lvbj0iQVBPNjAiIEZyYWNjaW9uQXJhbmNlbGFyaWE9IjM4MjAwMDAxMDAiIENhbnRpZGFkQWR1YW5hPSIxNDA3LjYwIiBVbmlkYWRBZHVhbmE9IjA4IiBWYWxvclVuaXRhcmlvQWR1YW5hPSIxLjI1IiBWYWxvckRvbGFyZXM9IjE3NTMuMjAiPgoJCQkJCTxjY2UxMTpEZXNjcmlwY2lvbmVzRXNwZWNpZmljYXMgTWFyY2E9IlBFUk1BVEVYIiBNb2RlbG89IkFOVElDT05HRUxBTlRFUyIgU3ViTW9kZWxvPSJQUk9EVUNUT1MgUEFSQSBSQURJQURPUiIgLz4KCQkJCTwvY2NlMTE6TWVyY2FuY2lhPgoJCQkJPGNjZTExOk1lcmNhbmNpYSBOb0lkZW50aWZpY2FjaW9uPSIzMS1BIiBGcmFjY2lvbkFyYW5jZWxhcmlhPSIzNDAzMTk5OTAwIiBDYW50aWRhZEFkdWFuYT0iMjEwLjAwIiBVbmlkYWRBZHVhbmE9IjAxIiBWYWxvclVuaXRhcmlvQWR1YW5hPSIyMS40MyIgVmFsb3JEb2xhcmVzPSI0NTAwLjAwIj4KCQkJCQk8Y2NlMTE6RGVzY3JpcGNpb25lc0VzcGVjaWZpY2FzIE1hcmNhPSJRVUlNSUNBIFRGIiBNb2RlbG89IlBST0RVQ1RPUyBFU1BFQ0lBTEVTIiBOdW1lcm9TZXJpZT0iODc1MDEzNzczMDUwMjAiIFN1Yk1vZGVsbz0iRVNNRVJJTCBCQVNFIEdSQVNBIiAvPgoJCQkJPC9jY2UxMTpNZXJjYW5jaWE+CgkJCTwvY2NlMTE6TWVyY2FuY2lhcz4KCQk8L2NjZTExOkNvbWVyY2lvRXh0ZXJpb3I+CgkJPHRmZDpUaW1icmVGaXNjYWxEaWdpdGFsIAogICAgICAgICAgICB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly93d3cuc2F0LmdvYi5teC9UaW1icmVGaXNjYWxEaWdpdGFsIGh0dHA6Ly93d3cuc2F0LmdvYi5teC9zaXRpb19pbnRlcm5ldC9jZmQvVGltYnJlRmlzY2FsRGlnaXRhbC9UaW1icmVGaXNjYWxEaWdpdGFsdjExLnhzZCIgCiAgICAgICAgICAgIFZlcnNpb249IjEuMSIgCiAgICAgICAgICAgIFVVSUQ9ImZjNDUwOTg0LTYyNjUtNDljZS05YzU5LTM5NThlOTQxNzQ3ZCIgCiAgICAgICAgICAgIEZlY2hhVGltYnJhZG89IjIwMjItMDYtMTRUMTY6MTk6MzEiIAogICAgICAgICAgICBSZmNQcm92Q2VydGlmPSJMU08xMzA2MTg5UjUiIAogICAgICAgICAgICBTZWxsb0NGRD0iS3Nza3ZtbVF3dFdDWU9ZSGVDMEY1RXdGeUNuMXlCdSsza1RvWHU4a2x3MDBEUXQ2NjNkTHhvR2lJZXhZU25wbkxES2NYemZ2bFkzQndNdHBsNUg2YjdKY09RZ3lMTitLMVU0RHdiR0UvRFdIS1ZwTk1qS2lmMWk3WTdBakZwcmRjYUs4NjVVWnFoVHRxSStGOGE2RFBqeWJNdDZnZVJEVHR4VEQvY3RvMlNRTHF1dTZmVi9TR1YyNmxqZ0sxUXdLQzhLdzJHUzVnYnAzMlRBSHlYRFI2ZDhDVi80TXZ3SjR0cWhGYXNra3ZKazhxbTdzTFJSeTBuT1ZpYitEUEFRQmJLSlUvN3RvRVhlYnp6UVJtWkNHbHFNWVQ3ZFl5T25ISHIyM3hFU0xPOTRwTDF4bUU3Y3FIOVArTE1jVVk2NFpMcU5Hd00rTVBXL2t4MzJlSGFDSFd3PT0iIAogICAgICAgICAgICBOb0NlcnRpZmljYWRvU0FUPSIwMDAwMTAwMDAwMDUwOTg0NjY2MyIgCiAgICAgICAgICAgIFNlbGxvU0FUPSJqNnlsOEhZa0tmZmxxSSsvd2k2RnNLeEMzV0RYNDdPTWcrYU9DdmkwWXZHZjBhTGs0YXp5SFhBdy91c09DS2hudjdnc3pmTEQyd3EyQkdmMzVGNGVYUC8vMDdreGlOemZSbWdDbDZjTVFWK3hYcS9OaS9rTSs5VWw5VG00N3pKOTJpdWRzWFEvLyt5L2xLRDFzVk45R3NHWTg1REYzUFhFV1luTDJueHBWSnFhY1hPVThManpnMjBsY3dHWGVMWUxMWnJnMkdkOEcwSmk0UVIwc2RWeVU1N3dGWDdYaGQrUUhOQ3lvUjNkalE5WjQ2TDhna3pUTGtEMG0ra0xybUViQ3RPaTZPSEQ5b0Y5RnNpYkZYV0E3N05jT0hRbXlqMnpxOVcxUTkxMmliaDhZbXJOd0RRKzBqcnNOVldPSGR4aSs4YStxaU4wVnVQV0ZmL0NTaFpKZ1E9PSIgCiAgICAgICAgICAgIHhtbG5zOnRmZD0iaHR0cDovL3d3dy5zYXQuZ29iLm14L1RpbWJyZUZpc2NhbERpZ2l0YWwiIAogICAgICAgICAgICB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiAvPgoJPC9jZmRpOkNvbXBsZW1lbnRvPgo8L2NmZGk6Q29tcHJvYmFudGU+"
var xmlIngreso1 ="PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPGNmZGk6Q29tcHJvYmFudGUgeG1sbnM6Y2ZkaT0iaHR0cDovL3d3dy5zYXQuZ29iLm14L2NmZC8zIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly93d3cuc2F0LmdvYi5teC9jZmQvMyBodHRwOi8vd3d3LnNhdC5nb2IubXgvc2l0aW9faW50ZXJuZXQvY2ZkLzMvY2ZkdjMzLnhzZCIgVmVyc2lvbj0iMy4zIiBTZXJpZT0iUkkiIEZvbGlvPSI5NDYzOCIgRmVjaGE9IjIwMjItMDYtMTZUMDg6MTE6NDgiIFNlbGxvPSIiIEZvcm1hUGFnbz0iOTkiIE5vQ2VydGlmaWNhZG89IiIgQ2VydGlmaWNhZG89IiIgQ29uZGljaW9uZXNEZVBhZ289IjMwIERJQVMgTkVUT1MiIFN1YlRvdGFsPSI5ODE4LjY4IiBNb25lZGE9Ik1YTiIgVGlwb0NhbWJpbz0iMSIgVG90YWw9IjExMzg5LjY3IiBUaXBvRGVDb21wcm9iYW50ZT0iSSIgTWV0b2RvUGFnbz0iUFBEIiBMdWdhckV4cGVkaWNpb249IjY0OTg4Ij4KCTxjZmRpOkVtaXNvciBSZmM9IklQTTYyMDMyMjZCNCIgTm9tYnJlPSJJVFcgUG9seW1leCBTIERFIFJMIERFIENWIiBSZWdpbWVuRmlzY2FsPSI2MDEiLz4KCTxjZmRpOlJlY2VwdG9yIFJmYz0iR09MQTg1MDcxMThDNiIgTm9tYnJlPSJBTE1BIEVTTUVSQUxEQSBHT05aQUxFWiBMRU9OIiBVc29DRkRJPSJHMDEiLz4KCTxjZmRpOkNvbmNlcHRvcz4KCQk8Y2ZkaTpDb25jZXB0byBDbGF2ZVByb2RTZXJ2PSIxMTE5MTYwMCIgTm9JZGVudGlmaWNhY2lvbj0iUExBU1RJQyIgQ2FudGlkYWQ9IjcwIiBDbGF2ZVVuaWRhZD0iNTgiIFVuaWRhZD0iS0ciIERlc2NyaXBjaW9uPSJQTEFTVElDTyIgVmFsb3JVbml0YXJpbz0iMy4wMDAwIiBJbXBvcnRlPSIyMTAuMDAiID4KCQkJPGNmZGk6SW1wdWVzdG9zPgoJCQk8Y2ZkaTpUcmFzbGFkb3M+CgkJCQk8Y2ZkaTpUcmFzbGFkbyBCYXNlPSIyMTAuMDAiIEltcHVlc3RvPSIwMDIiIFRpcG9GYWN0b3I9IlRhc2EiIFRhc2FPQ3VvdGE9IjAuMTYwMDAwIiBJbXBvcnRlPSIzMy42MCIgLz4KCQkJPC9jZmRpOlRyYXNsYWRvcz4KCQkJPC9jZmRpOkltcHVlc3Rvcz4KCQk8L2NmZGk6Q29uY2VwdG8+CgkJPGNmZGk6Q29uY2VwdG8gQ2xhdmVQcm9kU2Vydj0iMTExOTE2MDAiIE5vSWRlbnRpZmljYWNpb249IlBBUEVSQk9BUkQiIENhbnRpZGFkPSIyNzgyIiBDbGF2ZVVuaWRhZD0iNTgiIFVuaWRhZD0iS0ciIERlc2NyaXBjaW9uPSJDQVJUT04iIFZhbG9yVW5pdGFyaW89IjEuMDAwMCIgSW1wb3J0ZT0iMjc4Mi4wMCIgPgoJCQk8Y2ZkaTpJbXB1ZXN0b3M+CgkJCTxjZmRpOlRyYXNsYWRvcz4KCQkJCTxjZmRpOlRyYXNsYWRvIEJhc2U9IjI3ODIuMDAiIEltcHVlc3RvPSIwMDIiIFRpcG9GYWN0b3I9IlRhc2EiIFRhc2FPQ3VvdGE9IjAuMTYwMDAwIiBJbXBvcnRlPSI0NDUuMTIiIC8+CgkJCTwvY2ZkaTpUcmFzbGFkb3M+CgkJCTwvY2ZkaTpJbXB1ZXN0b3M+CgkJPC9jZmRpOkNvbmNlcHRvPgoJCTxjZmRpOkNvbmNlcHRvIENsYXZlUHJvZFNlcnY9IjExMTkxNjAwIiBOb0lkZW50aWZpY2FjaW9uPSJTQ1JBUCIgQ2FudGlkYWQ9IjIyNjgiIENsYXZlVW5pZGFkPSI1OCIgVW5pZGFkPSJLRyIgRGVzY3JpcGNpb249IkNIQVRBUlJBIiBWYWxvclVuaXRhcmlvPSIzLjAxMDAiIEltcG9ydGU9IjY4MjYuNjgiID4KCQkJPGNmZGk6SW1wdWVzdG9zPgoJCQk8Y2ZkaTpUcmFzbGFkb3M+CgkJCQk8Y2ZkaTpUcmFzbGFkbyBCYXNlPSI2ODI2LjY4IiBJbXB1ZXN0bz0iMDAyIiBUaXBvRmFjdG9yPSJUYXNhIiBUYXNhT0N1b3RhPSIwLjE2MDAwMCIgSW1wb3J0ZT0iMTA5Mi4yNyIgLz4KCQkJPC9jZmRpOlRyYXNsYWRvcz4KCQkJPC9jZmRpOkltcHVlc3Rvcz4KCQk8L2NmZGk6Q29uY2VwdG8+Cgk8L2NmZGk6Q29uY2VwdG9zPgoJPGNmZGk6SW1wdWVzdG9zIFRvdGFsSW1wdWVzdG9zVHJhc2xhZGFkb3M9IjE1NzAuOTkiPgoJCTxjZmRpOlRyYXNsYWRvcz4KCQkJPGNmZGk6VHJhc2xhZG8gSW1wdWVzdG89IjAwMiIgVGlwb0ZhY3Rvcj0iVGFzYSIgVGFzYU9DdW90YT0iMC4xNjAwMDAiIEltcG9ydGU9IjE1NzAuOTkiIC8+CgkJPC9jZmRpOlRyYXNsYWRvcz4KCTwvY2ZkaTpJbXB1ZXN0b3M+Cgk8Y2ZkaTpDb21wbGVtZW50bz4KICAgICAgICA8dGZkOlRpbWJyZUZpc2NhbERpZ2l0YWwgCiAgICAgICAgICAgIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL3d3dy5zYXQuZ29iLm14L1RpbWJyZUZpc2NhbERpZ2l0YWwgaHR0cDovL3d3dy5zYXQuZ29iLm14L3NpdGlvX2ludGVybmV0L2NmZC9UaW1icmVGaXNjYWxEaWdpdGFsL1RpbWJyZUZpc2NhbERpZ2l0YWx2MTEueHNkIiAKICAgICAgICAgICAgVmVyc2lvbj0iMS4xIiAKICAgICAgICAgICAgVVVJRD0iZmM0NTA5ODQtNjI2NS00OWNlLTljNTktMzk1OGU5NDE3NDdkIiAKICAgICAgICAgICAgRmVjaGFUaW1icmFkbz0iMjAyMi0wNi0xNFQxNjoxOTozMSIgCiAgICAgICAgICAgIFJmY1Byb3ZDZXJ0aWY9IkxTTzEzMDYxODlSNSIgCiAgICAgICAgICAgIFNlbGxvQ0ZEPSJLc3Nrdm1tUXd0V0NZT1lIZUMwRjVFd0Z5Q24xeUJ1KzNrVG9YdThrbHcwMERRdDY2M2RMeG9HaUlleFlTbnBuTERLY1h6ZnZsWTNCd010cGw1SDZiN0pjT1FneUxOK0sxVTREd2JHRS9EV0hLVnBOTWpLaWYxaTdZN0FqRnByZGNhSzg2NVVacWhUdHFJK0Y4YTZEUGp5Yk10NmdlUkRUdHhURC9jdG8yU1FMcXV1NmZWL1NHVjI2bGpnSzFRd0tDOEt3MkdTNWdicDMyVEFIeVhEUjZkOENWLzRNdndKNHRxaEZhc2trdkprOHFtN3NMUlJ5MG5PVmliK0RQQVFCYktKVS83dG9FWGVienpRUm1aQ0dscU1ZVDdkWXlPbkhIcjIzeEVTTE85NHBMMXhtRTdjcUg5UCtMTWNVWTY0WkxxTkd3TStNUFcva3gzMmVIYUNIV3c9PSIgCiAgICAgICAgICAgIE5vQ2VydGlmaWNhZG9TQVQ9IjAwMDAxMDAwMDAwNTA5ODQ2NjYzIiAKICAgICAgICAgICAgU2VsbG9TQVQ9Imo2eWw4SFlrS2ZmbHFJKy93aTZGc0t4QzNXRFg0N09NZythT0N2aTBZdkdmMGFMazRhenlIWEF3L3VzT0NLaG52N2dzemZMRDJ3cTJCR2YzNUY0ZVhQLy8wN2t4aU56ZlJtZ0NsNmNNUVYreFhxL05pL2tNKzlVbDlUbTQ3eko5Mml1ZHNYUS8vK3kvbEtEMXNWTjlHc0dZODVERjNQWEVXWW5MMm54cFZKcWFjWE9VOExqemcyMGxjd0dYZUxZTExacmcyR2Q4RzBKaTRRUjBzZFZ5VTU3d0ZYN1hoZCtRSE5DeW9SM2RqUTlaNDZMOGdrelRMa0QwbStrTHJtRWJDdE9pNk9IRDlvRjlGc2liRlhXQTc3TmNPSFFteWoyenE5VzFROTEyaWJoOFltck53RFErMGpyc05WV09IZHhpKzhhK3FpTjBWdVBXRmYvQ1NoWkpnUT09IiAKICAgICAgICAgICAgeG1sbnM6dGZkPSJodHRwOi8vd3d3LnNhdC5nb2IubXgvVGltYnJlRmlzY2FsRGlnaXRhbCIgCiAgICAgICAgICAgIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIC8+CiAgICA8L2NmZGk6Q29tcGxlbWVudG8+CjwvY2ZkaTpDb21wcm9iYW50ZT4="
var xmlLeyendas= ""
var prueba1 = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPGNmZGk6Q29tcHJvYmFudGUgeG1sbnM6Y2ZkaT0iaHR0cDovL3d3dy5zYXQuZ29iLm14L2NmZC80IgogICAgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vd3d3LnNhdC5nb2IubXgvY2ZkLzQgaHR0cDovL3d3dy5zYXQuZ29iLm14L3NpdGlvX2ludGVybmV0L2NmZC80L2NmZHY0MC54c2QiIFZlcnNpb249IjQuMCIgU2VyaWU9IkdUQyIgRm9saW89IjIyMDcwNTAyIiBGZWNoYT0iMjAyMi0wNy0wNFQxODoyNjoyNiIgU2VsbG89ImNUdklYdFMxTGhyTHZYYVUwL0hubCttSFpITmFSOUJyVnRJZ2xpWEtrV3RRdkd3T0RKczIyMjFlbWQ2aVpQbytQWWNYTFVya3RKSXVwVDg3RXdtTHh4blVtMUVFTDNJYm5GRVpmNDhvSS9YMy82dURpR2tWWTJvMTkxNUZpZnlVZXgvV2w2OU1MWGcxOXE1UlNadjBPeGxKRDZSRGpRQ0RyVzdwWEMvOElob1lEZjRyM2xpZTArNzVxYkIzUnphcUhTWDRRd3MybWhRcjZZaThBN1ROdUlDMno5aDVqd3NZRWEveEJPdnJqK1Y3ZU1wdythaDUxc3ZsMjdCQ1BMV01TbTBVUWQ0azN0aEJ4M1pLZGVabWN3QndpZkNLcExGZTJkRlFpYVpUaVFwMHNyK1RRMzNPZGp4cElJekhXblM4SjluMDMyc2hFU1JGbHhqVlg2N05sQT09IiBGb3JtYVBhZ289Ijk5IiBOb0NlcnRpZmljYWRvPSIwMDAwMTAwMDAwMDUxMzYyMjQwNiIgQ2VydGlmaWNhZG89Ik1JSUdEVENDQS9XZ0F3SUJBZ0lVTURBd01ERXdNREF3TURBMU1UTTJNakkwTURZd0RRWUpLb1pJaHZjTkFRRUxCUUF3Z2dHRU1TQXdIZ1lEVlFRRERCZEJWVlJQVWtsRVFVUWdRMFZTVkVsR1NVTkJSRTlTUVRFdU1Dd0dBMVVFQ2d3bFUwVlNWa2xEU1U4Z1JFVWdRVVJOU1U1SlUxUlNRVU5KVDA0Z1ZGSkpRbFZVUVZKSlFURWFNQmdHQTFVRUN3d1JVMEZVTFVsRlV5QkJkWFJvYjNKcGRIa3hLakFvQmdrcWhraUc5dzBCQ1FFV0cyTnZiblJoWTNSdkxuUmxZMjVwWTI5QWMyRjBMbWR2WWk1dGVERW1NQ1FHQTFVRUNRd2RRVll1SUVoSlJFRk1SMDhnTnpjc0lFTlBUQzRnUjFWRlVsSkZVazh4RGpBTUJnTlZCQkVNQlRBMk16QXdNUXN3Q1FZRFZRUUdFd0pOV0RFWk1CY0dBMVVFQ0F3UVEwbFZSRUZFSUVSRklFMUZXRWxEVHpFVE1CRUdBMVVFQnd3S1ExVkJWVWhVUlUxUFF6RVZNQk1HQTFVRUxSTU1VMEZVT1Rjd056QXhUazR6TVZ3d1dnWUpLb1pJaHZjTkFRa0NFMDF5WlhOd2IyNXpZV0pzWlRvZ1FVUk5TVTVKVTFSU1FVTkpUMDRnUTBWT1ZGSkJUQ0JFUlNCVFJWSldTVU5KVDFNZ1ZGSkpRbFZVUVZKSlQxTWdRVXdnUTA5T1ZGSkpRbFZaUlU1VVJUQWVGdzB5TWpBMk1qUXhOVEEyTVRKYUZ3MHlOakEyTWpReE5UQTJNVEphTUlIYk1TTXdJUVlEVlFRREV4cEpWRmNnVUU5TVdTQk5SVmdnVXlCRVJTQlNUQ0JFUlNCRFZqRWpNQ0VHQTFVRUtSTWFTVlJYSUZCUFRGa2dUVVZZSUZNZ1JFVWdVa3dnUkVVZ1ExWXhJekFoQmdOVkJBb1RHa2xVVnlCUVQweFpJRTFGV0NCVElFUkZJRkpNSUVSRklFTldNU1V3SXdZRFZRUXRFeHhKVUUwMk1qQXpNakkyUWpRZ0x5QldRVkJGTnpFd016QTVOMW80TVI0d0hBWURWUVFGRXhVZ0x5QldRVkJGTnpFd09UQTVTRTFEVWxKRU1EQXhJekFoQmdOVkJBc1RHa2xVVnlCUVQweFpJRTFGV0NCVElFUkZJRkpNSUVSRklFTldNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQWswVjF6M1BSV3hpUmFVaFN0VHArSjZXUDlVQWk2ZTFOcFdSTnhjYlBpeDExVlUvY1ExRWpWa1VpMDFTNWJMU0VmQU9hZHoyNnVCL2dPUHRjc21EeXUvUGNpb1ZCTWJKZmxYNDNUTk9LSXlPNno5aHJPak1WRlphYUxOVWh6NTF4Z1JXYlphWjZVMkYvRlF1VUcvMEt5QUNtd1phMTZNRFRKZjlsNURmTWFLZ3NFMnVOZ2tIa1g4REVlOVdZRlVEVXdFT056VU94eU9OZUtjR2JMZ3pMWnFUb1NIZitKbEJTRzdLYzlkUVYwL0JtTkFGcFl5eC96dW5ENG9ES2JDVDZieGJKSmhnQlRLTVAvYTZSNkplZTk0SVFoeThKUTVHV1l3c0FJakh0L0VQMXRQTHFwTnVucnN6K01aMkV3Nk1Md1VVcEpFVzF1Szh3c0l4dmd5ckhId0lEQVFBQm94MHdHekFNQmdOVkhSTUJBZjhFQWpBQU1Bc0dBMVVkRHdRRUF3SUd3REFOQmdrcWhraUc5dzBCQVFzRkFBT0NBZ0VBcWdKVGNBUFdMejNWYkxCazg4d1ZCVjR5cnBwQldEb0dabUk2dFZnWmdINGordlhIcXhEUnNGNFd1cjRVenNaWGVYQmdlRm96QU82bGZkSXpTRGdCNDNwLy92ZjFyYmJkR01XazhOU09aOU1vRGF2UDZFendnUXdUR1RvSXNoVWlNeEJzV0M2QWZRWTN2Qm9pWVhlajh2VTFTVEF5LzVLdUZnZVdoZkhoNHNmNjBsS2l0N09LcVhUMEs2NnFSZUhvcHhNbGQyT0hvUC9abXRlMGIvUUxSZlR6VkZzb3hSRWpkQWNUOW16cURzTWNxRVhGWFQvQ1FpRHZWWCtRbk5lZlBQUlhZcGZGU3FWMngzV0hxUEZkNkpaczBoZWtyYTNGQXRFY09sRFNVbmY3UTFGTzhCYTlLS2VhSlJkVzI5SDU3MmNrL095aEUxOWF4OHpkWVVFdHg1SDRtK0EyODdHK3VPSTcvbU1qa2tUb1pLR2F6UWppVHV0YURHVjdneXo5UFNZcHB1ZkNQU2tGY2kvT0JPdUhWTnNPaEYzcXg2OWdLMTJnU2M4TS9aMHRNbWhOMGVCcURtdldTRmRkM3dWR0h0aTU5bDVWSEFCdUlEdjRob1M0eHJuS0V6blVMLzRGYVFwSDNxZzRoVnR6Y0hFNUxUY1ppalF1bnV0WUd0a1hOMFRtczJaeGlVODh4M1JsZ3g2R2FIbkwxbmJQYi9saUxKY2dSMFU0RitMZWxXUytJd3lpS3pRU3BsRFlSM1VBT0pkdnRTTjRrbHZBbDBya29rVVhsSUJOWTgzUWhHellyMytjdmJYOHFqMFhESm5YaWtJOEQ2QkE5STh6MWtIbkVMdTJPcG5pWVVyRGRVZHgzQU50anhQRHZ4bDFycDFPSHZVWFBYd1dRbmc9IiBDb25kaWNpb25lc0RlUGFnbz0iMzAgRElBUyBORVRPUyIgU3ViVG90YWw9IjE2MTIxMi41IiBNb25lZGE9Ik1YTiIgVGlwb0NhbWJpbz0iMSIgVG90YWw9IjE4NzAwNi41IiBUaXBvRGVDb21wcm9iYW50ZT0iSSIgTWV0b2RvUGFnbz0iUFBEIiBMdWdhckV4cGVkaWNpb249Ijc2MjQ2IiBFeHBvcnRhY2lvbj0iMDEiPgogICAgPGNmZGk6RW1pc29yIFJmYz0iSVBNNjIwMzIyNkI0IiBOb21icmU9IklUVyBQT0xZIE1FWCIgUmVnaW1lbkZpc2NhbD0iNjAxIi8+CiAgICA8Y2ZkaTpSZWNlcHRvciBSZmM9Ik1HRDA3MTExM04yMCIgTm9tYnJlPSJNRURJTUVYIEdETCIgVXNvQ0ZEST0iRzAxIiBEb21pY2lsaW9GaXNjYWxSZWNlcHRvcj0iNDQ0OTAiIFJlZ2ltZW5GaXNjYWxSZWNlcHRvcj0iNjAxIi8+CiAgICA8Y2ZkaTpDb25jZXB0b3M+CiAgICAgICAgPGNmZGk6Q29uY2VwdG8gQ2xhdmVQcm9kU2Vydj0iMzEyMDE2MTkiIE5vSWRlbnRpZmljYWNpb249IlRBSS1UMyIgQ2FudGlkYWQ9IjI1IiBDbGF2ZVVuaWRhZD0iWDRHIiBVbmlkYWQ9IkNBIiBEZXNjcmlwY2lvbj0iUEVHQU1FTlRPIElOU1QgVE9QIDMuNUcgVElSQSIgVmFsb3JVbml0YXJpbz0iNTg1Ni4wMDAwIiBJbXBvcnRlPSIxNDY0MDAuMDAiIE9iamV0b0ltcD0iMDIiPgogICAgICAgICAgICA8Y2ZkaTpJbXB1ZXN0b3M+CiAgICAgICAgICAgICAgICA8Y2ZkaTpUcmFzbGFkb3M+CiAgICAgICAgICAgICAgICAgICAgPGNmZGk6VHJhc2xhZG8gQmFzZT0iMTQ2NDAwLjAwIiBJbXB1ZXN0bz0iMDAyIiBUaXBvRmFjdG9yPSJUYXNhIiBUYXNhT0N1b3RhPSIwLjE2MDAwMCIgSW1wb3J0ZT0iMjM0MjQuMDAiLz4KICAgICAgICAgICAgICAgIDwvY2ZkaTpUcmFzbGFkb3M+CiAgICAgICAgICAgIDwvY2ZkaTpJbXB1ZXN0b3M+CiAgICAgICAgPC9jZmRpOkNvbmNlcHRvPgogICAgICAgIDxjZmRpOkNvbmNlcHRvIENsYXZlUHJvZFNlcnY9IjYwMTAxMzAwIiBOb0lkZW50aWZpY2FjaW9uPSJUTEFUOCIgQ2FudGlkYWQ9IjEwIiBDbGF2ZVVuaWRhZD0iWDRHIiBVbmlkYWQ9IkNBIiBEZXNjcmlwY2lvbj0iTEFQSVogQURIRVNJVk8gOEcgVElSQSAyMCBQWkFTIiBWYWxvclVuaXRhcmlvPSIxNDgxLjI1MDAiIEltcG9ydGU9IjE0ODEyLjUwIiBPYmpldG9JbXA9IjAyIj4KICAgICAgICAgICAgPGNmZGk6SW1wdWVzdG9zPgogICAgICAgICAgICAgICAgPGNmZGk6VHJhc2xhZG9zPgogICAgICAgICAgICAgICAgICAgIDxjZmRpOlRyYXNsYWRvIEJhc2U9IjE0ODEyLjUwIiBJbXB1ZXN0bz0iMDAyIiBUaXBvRmFjdG9yPSJUYXNhIiBUYXNhT0N1b3RhPSIwLjE2MDAwMCIgSW1wb3J0ZT0iMjM3MC4wMCIvPgogICAgICAgICAgICAgICAgPC9jZmRpOlRyYXNsYWRvcz4KICAgICAgICAgICAgPC9jZmRpOkltcHVlc3Rvcz4KICAgICAgICA8L2NmZGk6Q29uY2VwdG8+CiAgICA8L2NmZGk6Q29uY2VwdG9zPgogICAgPGNmZGk6SW1wdWVzdG9zIFRvdGFsSW1wdWVzdG9zVHJhc2xhZGFkb3M9IjI1Nzk0Ij4KICAgICAgICA8Y2ZkaTpUcmFzbGFkb3M+CiAgICAgICAgICAgIDxjZmRpOlRyYXNsYWRvIEltcHVlc3RvPSIwMDIiIFRpcG9GYWN0b3I9IlRhc2EiIFRhc2FPQ3VvdGE9IjAuMTYwMDAwIiBJbXBvcnRlPSIyNTc5NCIgQmFzZT0iMTYxMjEyLjUiLz4KICAgICAgICA8L2NmZGk6VHJhc2xhZG9zPgogICAgPC9jZmRpOkltcHVlc3Rvcz4KICAgIDxjZmRpOkNvbXBsZW1lbnRvPgogICAgICAgIDx0ZmQ6VGltYnJlRmlzY2FsRGlnaXRhbCB4bWxuczp0ZmQ9Imh0dHA6Ly93d3cuc2F0LmdvYi5teC9UaW1icmVGaXNjYWxEaWdpdGFsIgogICAgICAgICAgICB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly93d3cuc2F0LmdvYi5teC9UaW1icmVGaXNjYWxEaWdpdGFsIGh0dHA6Ly93d3cuc2F0LmdvYi5teC9zaXRpb19pbnRlcm5ldC9jZmQvVGltYnJlRmlzY2FsRGlnaXRhbC9UaW1icmVGaXNjYWxEaWdpdGFsdjExLnhzZCIgVmVyc2lvbj0iMS4xIiBVVUlEPSI5MEZDOUQ3Mi1BMDRFLTQ2MjItODg5MS02ODFDREY3QkY2M0MiIEZlY2hhVGltYnJhZG89IjIwMjItMDctMDVUMTg6Mzk6MDMiIFJmY1Byb3ZDZXJ0aWY9IkFBQTAxMDEwMUFBQSIgU2VsbG9DRkQ9ImNUdklYdFMxTGhyTHZYYVUwL0hubCttSFpITmFSOUJyVnRJZ2xpWEtrV3RRdkd3T0RKczIyMjFlbWQ2aVpQbytQWWNYTFVya3RKSXVwVDg3RXdtTHh4blVtMUVFTDNJYm5GRVpmNDhvSS9YMy82dURpR2tWWTJvMTkxNUZpZnlVZXgvV2w2OU1MWGcxOXE1UlNadjBPeGxKRDZSRGpRQ0RyVzdwWEMvOElob1lEZjRyM2xpZTArNzVxYkIzUnphcUhTWDRRd3MybWhRcjZZaThBN1ROdUlDMno5aDVqd3NZRWEveEJPdnJqK1Y3ZU1wdythaDUxc3ZsMjdCQ1BMV01TbTBVUWQ0azN0aEJ4M1pLZGVabWN3QndpZkNLcExGZTJkRlFpYVpUaVFwMHNyK1RRMzNPZGp4cElJekhXblM4SjluMDMyc2hFU1JGbHhqVlg2N05sQT09IiBOb0NlcnRpZmljYWRvU0FUPSIyMDAwMTAwMDAwMDEwMDAwNTc2MSIgU2VsbG9TQVQ9IlVJMGFCajNTV3Z1aVVTc2JoTDJzeWwzRi9GVysycmJQU3lBK2ZrcU0xMGFpUnBOaDdOenZyT0NsNWVWYngwV1YvaHlHYVpPZlUxS0R6S092YzFFaDJqRzR4b3FKWUkxZURXcEtmeHpNQnprc3d2V0VQNEkzY2JlZmg3eFgvRENUSENEVmNNZFQ3RmFGNmF3cG9FekpMMXBiYjFKRDg5cXZBaG9iTStjR0lIcz0iLz4KICAgIDwvY2ZkaTpDb21wbGVtZW50bz4KPC9jZmRpOkNvbXByb2JhbnRlPg=="

async function getPDFPolymex(docBase64, txtDocument, pathLogo)
{

    try {

        logger.info('Procesando PDF de Factura de Polymex.');

        //Leo el archivo guardado anteriormente
        const txtString  = fs.readFileSync(txtDocument, 'utf-8');

        console.log(txtString)

        //Separamos el archivo por \r para obtener cada uno de los elementos.
        var arrayLineas = txtString.split("\n")
        
        //Obtenemos el array de correos para emailTo
        var arrayEmailTo = arrayLineas[0].split(",")

        //Obtenemos el array de correos para emailCC
        var arrayEmailCC = arrayLineas[1].split(",")

        //Quitamos primer y último elemento de la cadena de parámetros encabezado.
        var params = arrayLineas[2].slice(1,-1)

        //Separamos los parámetros de encabezado por el caracter ^
        var paramsEncabezado = params.split("^")

        //Para obtener los lotes y piezas
        var lotesPiezas;

        //Para obtener los lotes
        var arrayLotes;

        //Para obtener las piezas
        var arrayPiezas;

        //Para obtener las referencias cruzadas
        var arrayRefCruzadas;

        var xmlString = await xml.serializeXML(docBase64)

        var options = {compact: false, ignoreComment: true, spaces: 4};
        const jsonString = convert.xml2json(xmlString, options);
        const jsonData = JSON.parse(jsonString)
        var conceptos = jsonData.elements[0].elements.find( o => o.name === "cfdi:Conceptos")
        var attributes = jsonData.elements[0].attributes
        var emisor = jsonData.elements[0].elements.find( o => o.name === "cfdi:Emisor")
        var receptor = jsonData.elements[0].elements.find( o => o.name === "cfdi:Receptor")
        var impuestos = jsonData.elements[0].elements.find( o => o.name === "cfdi:Impuestos")

        if(impuestos !== undefined)
        {
            var trasladosN = impuestos.elements.find( o => o.name === "cfdi:Traslados")
        }
        
        var complemento = jsonData.elements[0].elements.find( o => o.name === "cfdi:Complemento")
        var timbreFiscal = complemento.elements.find( o => o.name === "tfd:TimbreFiscalDigital")
        var leyendaFiscal = complemento.elements.find( o => o.name === "leyendasFisc:LeyendasFiscales")
        var pago = complemento.elements.find( o => o.name === "pago20:Pagos")
        var comercioExterior = complemento.elements.find( o => o.name === "cce11:ComercioExterior")

        console.log(pago)

        if(attributes.TipoDeComprobante === "I" || attributes.TipoDeComprobante === "T" || attributes.TipoDeComprobante === "E")
        {
            lotesPiezas = arrayLineas[3].split("|")

            //Para obtener los lotes
            arrayLotes = lotesPiezas[1].split("^")

            //Para obtener las piezas
            arrayPiezas = lotesPiezas[2].split("^")

            //Para obtener las referencias cruzadas
            arrayRefCruzadas = lotesPiezas[3].split("^")
        }

        //Condicionar la leyenda de exportación, si no viene no pintarla.
        var exportacion = "";
        if(attributes.Exportacion !== undefined)
        {
            exportacion = "Exportación: " + attributes.Exportacion + "\n"
        }

        var datosEmisor = {
            text: [
                "\n",
                "\n",
                {text: emisor.attributes.Nombre + `\n`, style: 'textotablaboldlarge'},
                {text: "DOMICILIO FISCAL \n", style: 'encabezadoDomicilio'},
                {text: paramsEncabezado[0] + " No. " + paramsEncabezado[1] + "\n", style: 'encabezadoTexto'},
                {text: paramsEncabezado[2] + "\n", style: 'encabezadoTexto'},
                {text: paramsEncabezado[3] + ", " + paramsEncabezado[4] +  " CP: " + paramsEncabezado[5] +  " " + paramsEncabezado[8] + "\n", style: 'encabezadoTexto'},
                {text: "Tel: " + paramsEncabezado[9] + "\n", style: 'encabezadoTexto'},
                {text: emisor.attributes.Rfc + `\n`, style: 'encabezadoTexto'},
                {text: "Lugar de expedición: " + attributes.LugarExpedicion + "\n", style: 'encabezadoTexto'},
                {text: exportacion, style: 'encabezadoTexto'},
            ]
        }

        var textoEncabezado = "";
        if(attributes.TipoDeComprobante === "I" || attributes.TipoDeComprobante === "E")
        {
            textoEncabezado = "CFDI versión " + attributes.Version;
        }
        else if(attributes.TipoDeComprobante === "P")
        {
            
            textoEncabezado = "Complemento de pago " + pago.attributes.Version;
        }
        else if(attributes.TipoDeComprobante === "T")
        {
            
            textoEncabezado = "Traslado " + attributes.Version;
        }

        var textoFactura = ""
        if(attributes.TipoDeComprobante === "I" || attributes.TipoDeComprobante === "T")
        {
            textoFactura = "Factura No.";
        }
        else if(attributes.TipoDeComprobante === "E")
        {
            textoFactura = "Nota de Cred.";
        }
        else if(attributes.TipoDeComprobante === "P")
        {
            textoFactura = "Pago No.";
        }

        var encabezado =
        {
            columns: [
                [
                    {text: datosEmisor}
                ],
                [
                    {
                        table: {
                            body: [
                                [
                                    {border: [false, false, false, false], text: '------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------', alignment: 'center', style: 'textoinvisible'},
                                ],
                                [
                                    {fillColor: "#050583", text: textoEncabezado, alignment: 'center', style: 'textotablawhite'},
                                ],
                            ]
                        },
                        layout: {
                            hLineWidth: function () {
                                return  0.7;
                            },
                            vLineWidth: function () {
                                return 0.7;
                            },
                            hLineColor: function () {
                                return 'black';
                            },
                            vLineColor: function () {
                                return 'black';
                            },
                        }	
                    },
                    { image: pathLogo, width: 180, height: 80, alignment: 'left'},
                    {
                        table: {
                            widths: ["*", 80],
                            body: [
                                [
                                    {fillColor: "#050583", text:"Fecha", alignment: 'center', style: 'textotablawhite'},
                                    {fillColor: "#050583", text: textoFactura, alignment: 'center', style: 'textotablawhite'},
                                ],
                                [
                                    {text: attributes.Fecha, alignment: 'center', style: 'textotablablack'},
                                    {text: attributes.Serie + attributes.Folio, alignment: 'center', style: 'textotablablack'},
                                ],
                            ]
                        },
                        layout: {
                            hLineWidth: function () {
                                return  0.7;
                            },
                            vLineWidth: function () {
                                return 0.7;
                            },
                            hLineColor: function () {
                                return 'black';
                            },
                            vLineColor: function () {
                                return 'black';
                            },
                        }	
                    },
                ]
            ]
        }

        var domFiscal = ""
        if(receptor.attributes.DomicilioFiscalReceptor !== undefined)
        {
            domFiscal = receptor.attributes.DomicilioFiscalReceptor;
        }

        var regFiscal = ""
        if(receptor.attributes.RegimenFiscalReceptor !== undefined)
        {
            regFiscal = receptor.attributes.RegimenFiscalReceptor;
        }

        var emisorReceptor = 
        {
            table: {
                widths: ["*", 262],
                body: [
                    [
                        {text: 
                            [
                                {text: `Nombre o Razón Social:\n`, style: 'textotablaEmisorReceptor'},
                                {text: receptor.attributes.Nombre + `\n`, style: 'textotablaEmisorReceptor'},
                                {text: paramsEncabezado[10] + " " + paramsEncabezado[11] + `\n`, style: 'textotablaEmisorReceptor'},
                                {text: paramsEncabezado[12] + `\n`, style: 'textotablaEmisorReceptor'},
                                {text: paramsEncabezado[13] + ", " + paramsEncabezado[14] + " CP: " + paramsEncabezado[15] + "\n", style: 'textotablaEmisorReceptor'},
                                {text: "Domicilio Fiscal: " + domFiscal + "\n", style: 'textotablaEmisorReceptor'},
                                {text: "RFC: " + receptor.attributes.Rfc + "\t\t\t\t\t\t\t\t\t\t" + paramsEncabezado[17] + "\n", style: 'textotablaEmisorReceptor'},
                                {text: "Tel: " + paramsEncabezado[16] + "\n", style: 'textotablaEmisorReceptor'},
                                {text: "Régimen Fiscal: " + regFiscal, style: 'textotablaEmisorReceptor'},
                            ]
                        },
                        {text: 
                            [
                                {text: `Consignatario\n`, style: 'textotablaEmisorReceptor'},
                                {text: paramsEncabezado[18] + `\n`, style: 'textotablaEmisorReceptor'},
                                {text: paramsEncabezado[19] + " " + paramsEncabezado[20] + `\n`, style: 'textotablaEmisorReceptor'},
                                {text: paramsEncabezado[22] + `\n`, style: 'textotablaEmisorReceptor'},
                                {text: paramsEncabezado[23] + ", " + paramsEncabezado[24] + " " +paramsEncabezado[25] + " CP.\n", style: 'textotablaEmisorReceptor'},
                                {text: paramsEncabezado[26] + `\n`, style: 'textotablaEmisorReceptor'},
                            ]
                        },
                    ],
                ]
            },
            layout: {
                hLineWidth: function () {
                    return  0.7;
                },
                vLineWidth: function () {
                    return 0.7;
                },
                hLineColor: function () {
                    return 'black';
                },
                vLineColor: function () {
                    return 'black';
                },
            }	
        }

        var paramsUsoCFDI = {
            pvOptionCRUD: "R",
            pvIdCatalog: receptor.attributes.UsoCFDI,
            table: "SAT_Cat_CFDI_Uses"
        }

        var resUsoCFDI = await dbcatcatalogs.getCatalogIdDescription(paramsUsoCFDI)

        var paramsTipoComprobante = {
            pvOptionCRUD: "R",
            pvIdCatalog: attributes.TipoDeComprobante,
            table: "SAT_Cat_Receipt_Types"
        }

        var resTipoComprobante = await dbcatcatalogs.getCatalogIdDescription(paramsTipoComprobante);

        var paramsMetodoPago = {
            pvOptionCRUD: "R",
            pvIdCatalog: attributes.MetodoPago,
            table: "SAT_Cat_Payment_Methods"
        }

        var resMetodoPago = await dbcatcatalogs.getCatalogIdDescription(paramsMetodoPago);

        var paramsFormaPago = {
            pvOptionCRUD: "R",
            pvIdCatalog: attributes.FormaPago,
            table: "SAT_Cat_Payment_Instruments"
        }

        var resFormaPago = await dbcatcatalogs.getCatalogIdDescription(paramsFormaPago);

        var tipoComprobante = {}
        var condiciones = {}
        var vendedor = {}
        var conceptosTable = {}
        var pagosTable = {}
        var cfdiRelTable = {}
        var comercioExteriorTable = {}
        var espacio1={}
        if(attributes.TipoDeComprobante === "I")
        {
            tipoComprobante = {
                table: {
                    widths: [100,120,90,90,"*"],
                    body: [
                        [
                            {border: [true, false, true, false], text: `Tipo de comprobante`, style: 'textotablaEmisorReceptor', alignment: "center"},
                            {border: [true, false, true, false], text: `Tipo de Relación entre CFDI`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            {border: [true, false, true, false], text: `Clave de Uso de CFDI`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            {border: [true, false, true, false], text: `Método de Pago`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            {border: [true, false, true, false], text: `Forma de Pago`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                        ],
                        [
                            {border: [true, false, true, true], text: attributes.TipoDeComprobante + " - " +  resTipoComprobante, style: 'textotablaEmisorReceptor', alignment: "center"},
                            {border: [true, false, true, true], text: ``, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            {border: [true, false, true, true], text: receptor.attributes.UsoCFDI + " - " + resUsoCFDI, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            {border: [true, false, true, true], text: attributes.MetodoPago + " - " + resMetodoPago, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            {border: [true, false, true, true], text: attributes.FormaPago + " - " + resFormaPago, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                        ],
                    ]
                },
                layout: {
                    hLineWidth: function () {
                        return  0.7;
                    },
                    vLineWidth: function () {
                        return 0.7;
                    },
                    hLineColor: function () {
                        return 'black';
                    },
                    vLineColor: function () {
                        return 'black';
                    },
                }	
            }

            
            /*if(comercioExterior === undefined)
            {   
                //No hay comercio exterior
                condiciones = 
                {
                    table: {
                        widths: ["*",90,90,101],
                        body: [
                            [
                                {border: [true, false, true, false], text: `Condiciones`, style: 'textotablaEmisorReceptor', alignment: "center"},
                                {border: [true, false, true, false], text: `Orden de Venta`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                                {border: [true, false, true, false], text: `Fecha Vencimiento`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                                {border: [true, false, true, false], text: `Orden de Compra`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            ],
                            [
                                {border: [true, false, true, true], text: attributes.CondicionesDePago, style: 'textotablaEmisorReceptor', alignment: "center"},
                                {border: [true, false, true, true], text: paramsEncabezado[28], style: 'textotablaEmisorReceptor', alignment: "center"}, 
                                {border: [true, false, true, true], text: paramsEncabezado[29], style: 'textotablaEmisorReceptor', alignment: "center"}, 
                                {border: [true, false, true, true], text: paramsEncabezado[30], style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            ],
                        ]
                    },
                    layout: {
                        hLineWidth: function () {
                            return  0.7;
                        },
                        vLineWidth: function () {
                            return 0.7;
                        },
                        hLineColor: function () {
                            return 'black';
                        },
                        vLineColor: function () {
                            return 'black';
                        },
                    }
                }

            }
            else {
                //Hay comercio exterior
                console.log(comercioExterior)
                condiciones = 
                {
                    table: {
                        widths: ["*",70, 70,70,101],
                        body: [
                            [
                                {border: [true, false, true, false], text: `Condiciones`, style: 'textotablaEmisorReceptor', alignment: "center"},
                                {border: [true, false, true, false], text: `Orden de Venta`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                                {border: [true, false, true, false], text: `Tipo de Cambio`, style: 'textotablaEmisorReceptor', alignment: "center"},
                                {border: [true, false, true, false], text: `Fecha Vencimiento`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                                {border: [true, false, true, false], text: `Orden de Compra`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            ],
                            [
                                {border: [true, false, true, true], text: attributes.CondicionesDePago, style: 'textotablaEmisorReceptor', alignment: "center"},
                                {border: [true, false, true, true], text: paramsEncabezado[28], style: 'textotablaEmisorReceptor', alignment: "center"}, 
                                {border: [true, false, true, true], text: comercioExterior.attributes.TipoCambioUSD, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                                {border: [true, false, true, true], text: paramsEncabezado[29], style: 'textotablaEmisorReceptor', alignment: "center"}, 
                                {border: [true, false, true, true], text: paramsEncabezado[30], style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            ],
                        ]
                    },
                    layout: {
                        hLineWidth: function () {
                            return  0.7;
                        },
                        vLineWidth: function () {
                            return 0.7;
                        },
                        hLineColor: function () {
                            return 'black';
                        },
                        vLineColor: function () {
                            return 'black';
                        },
                    }
                }
            }*/

            condiciones = 
                {
                    table: {
                        widths: ["*",90,90,101],
                        body: [
                            [
                                {border: [true, false, true, false], text: `Condiciones`, style: 'textotablaEmisorReceptor', alignment: "center"},
                                {border: [true, false, true, false], text: `Orden de Venta`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                                {border: [true, false, true, false], text: `Fecha Vencimiento`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                                {border: [true, false, true, false], text: `Orden de Compra`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            ],
                            [
                                {border: [true, false, true, true], text: attributes.CondicionesDePago, style: 'textotablaEmisorReceptor', alignment: "center"},
                                {border: [true, false, true, true], text: paramsEncabezado[28], style: 'textotablaEmisorReceptor', alignment: "center"}, 
                                {border: [true, false, true, true], text: paramsEncabezado[29], style: 'textotablaEmisorReceptor', alignment: "center"}, 
                                {border: [true, false, true, true], text: paramsEncabezado[30], style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            ],
                        ]
                    },
                    layout: {
                        hLineWidth: function () {
                            return  0.7;
                        },
                        vLineWidth: function () {
                            return 0.7;
                        },
                        hLineColor: function () {
                            return 'black';
                        },
                        vLineColor: function () {
                            return 'black';
                        },
                    }
                }

            vendedor = 
            {
                table: {
                    widths: [80,200,90,"*"],
                    body: [
                        [
                            {border: [true, false, true, false], text: `Vendedor`, style: 'textotablaEmisorReceptor', alignment: "center"},
                            {border: [true, false, true, false], text: `Abono Bancario / Transferencia Electrónica`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            {border: [true, false, true, false], text: `Referencia Pago`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            {border: [true, false, true, false], text: `Referencia Pago Interbarcario`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                        ],
                        [
                            {border: [true, false, true, true], text: paramsEncabezado[31], style: 'textotablaEmisorReceptor', alignment: "center"},
                            {border: [true, false, true, true], text: paramsEncabezado[32], style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            {border: [true, false, true, true], text: paramsEncabezado[33], style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            {border: [true, false, true, true], text: paramsEncabezado[34], style: 'textotablaEmisorReceptor', alignment: "center"}, 
                        ],
                    ]
                },
                layout: {
                    hLineWidth: function () {
                        return  0.7;
                    },
                    vLineWidth: function () {
                        return 0.7;
                    },
                    hLineColor: function () {
                        return 'black';
                    },
                    vLineColor: function () {
                        return 'black';
                    },
                }
            }

            var concepts = []
            var psItems = 0;

            concepts[psItems] = [
                {border: [true, true, false, true], text: `Clave Producto`, style: 'textotabla', alignment: "center"},
                {border: [false, true, false, true], text: `Clave SAT`, style: 'textotabla', alignment: "center"}, 
                {border: [false, true, false, true], text: `Descripción`, style: 'textotabla', alignment: "center"}, 
                {border: [false, true, false, true], text: `Unidad`, style: 'textotabla', alignment: "center"}, 
                {border: [false, true, false, true], text: `Clave Unidad`, style: 'textotabla', alignment: "center"}, 
                {border: [false, true, false, true], text: `Cant.`, style: 'textotabla', alignment: "center"},
                {border: [false, true, false, true], text: `Lote`, style: 'textotabla', alignment: "center"}, 
                {border: [false, true, false, true], text: `Piezas`, style: 'textotabla', alignment: "center"}, 
                {border: [false, true, false, true], text: `Precio Unitario`, style: 'textotabla', alignment: "center"}, 
                {border: [false, true, false, true], text: `Base`, style: 'textotabla', alignment: "center"}, 
                {border: [false, true, false, true], text: `Impuesto`, style: 'textotabla', alignment: "center"},
                {border: [false, true, false, true], text: `Factor`, style: 'textotabla', alignment: "center"}, 
                {border: [false, true, false, true], text: `Tasa`, style: 'textotabla', alignment: "center"}, 
                {border: [false, true, true, true], text: `Importe`, style: 'textotabla', alignment: "center"}, 
            ]

            psItems++

            //Iteramos cada uno de los conceptos
            for(var i=0; i<conceptos.elements.length; i++)
            {
                if(conceptos.elements[i].elements !== undefined)
                {
                    
                    var impuestos = conceptos.elements[i].elements.find( o => o.name === "cfdi:Impuestos")
                    var traslados = impuestos.elements.find( o => o.name === "cfdi:Traslados")

                    if(i !== conceptos.elements.length-1)
                    {
                        concepts[psItems] = [
                            {border: [true, false, false, false], text: conceptos.elements[i].attributes.NoIdentificacion + "\n" + arrayRefCruzadas[i], style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.ClaveProdServ, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.Descripcion + "\n" + "Objeto Imp.: " + conceptos.elements[i].attributes.ObjetoImp, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.Unidad, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.ClaveUnidad, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.Cantidad, style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, false], text: arrayLotes[i], style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: arrayPiezas[i], style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: "$" + parseFloat(conceptos.elements[i].attributes.ValorUnitario).toLocaleString("en"), style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: "$" + parseFloat(traslados.elements[0].attributes.Base).toLocaleString("en"), style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: traslados.elements[0].attributes.Impuesto, style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, false], text: traslados.elements[0].attributes.TipoFactor, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: traslados.elements[0].attributes.TasaOCuota, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, true, false], text: "$" + parseFloat( conceptos.elements[i].attributes.Importe).toLocaleString("en"), style: 'textotabla3', alignment: "center"}, 
                        ]
                
                        psItems++
                    }
                    else {
                        concepts[psItems] = [
                            {border: [true, false, false, true], text: conceptos.elements[i].attributes.NoIdentificacion + "\n" + arrayRefCruzadas[i], style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, true], text: conceptos.elements[i].attributes.ClaveProdServ, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: conceptos.elements[i].attributes.Descripcion + "\n" +  "Objeto Imp.: " + conceptos.elements[i].attributes.ObjetoImp, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: conceptos.elements[i].attributes.Unidad, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: conceptos.elements[i].attributes.ClaveUnidad, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: conceptos.elements[i].attributes.Cantidad, style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, true], text: arrayLotes[i], style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: arrayPiezas[i], style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: "$" + parseFloat(conceptos.elements[i].attributes.ValorUnitario).toLocaleString("en"), style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: "$" + parseFloat(traslados.elements[0].attributes.Base).toLocaleString("en"), style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: traslados.elements[0].attributes.Impuesto, style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, true], text: traslados.elements[0].attributes.TipoFactor, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: traslados.elements[0].attributes.TasaOCuota, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, true, true], text: "$" + parseFloat( conceptos.elements[i].attributes.Importe).toLocaleString("en"), style: 'textotabla3', alignment: "center"}, 
                        ]
                
                        psItems++
                    }
                }
                else {
                    if(i !== conceptos.elements.length-1)
                    {
                        concepts[psItems] = [
                            {border: [true, false, false, false], text: conceptos.elements[i].attributes.NoIdentificacion + "\n" + arrayRefCruzadas[i], style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.ClaveProdServ, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.Descripcion + "\n" + "Objeto Imp.: " + conceptos.elements[i].attributes.ObjetoImp, style: 'textotabla', alignment: "center"}, 
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.Unidad, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.ClaveUnidad, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.Cantidad, style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, false], text: arrayLotes[i], style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: arrayPiezas[i], style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: "$" + parseFloat(conceptos.elements[i].attributes.ValorUnitario).toLocaleString("en"), style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: "", style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: "", style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, false], text: "", style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: "", style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, true, false], text: "$" + parseFloat( conceptos.elements[i].attributes.Importe).toLocaleString("en"), style: 'textotabla3', alignment: "center"}, 
                        ]
                
                        psItems++
                    }
                    else {
                        concepts[psItems] = [
                            {border: [true, false, false, true], text: conceptos.elements[i].attributes.NoIdentificacion + "\n" + arrayRefCruzadas[i], style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, true], text: conceptos.elements[i].attributes.ClaveProdServ, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: conceptos.elements[i].attributes.Descripcion + "\n" +  "Objeto Imp. - " + conceptos.elements[i].attributes.ObjetoImp, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: conceptos.elements[i].attributes.Unidad, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: conceptos.elements[i].attributes.ClaveUnidad, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: conceptos.elements[i].attributes.Cantidad, style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, true], text: arrayLotes[i], style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: arrayPiezas[i], style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: "$" + parseFloat(conceptos.elements[i].attributes.ValorUnitario).toLocaleString("en"), style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: "", style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: "", style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, true], text: "", style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: "", style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, true, true], text: "$" + parseFloat( conceptos.elements[i].attributes.Importe).toLocaleString("en"), style: 'textotabla3', alignment: "center"}, 
                        ]
                
                        psItems++
                    }
                }
            }

            conceptosTable = 
            [
                {
                    table: {
                        dontBreakRows: true, 
                        headerRows: 1,
                        widths: [27,30,"*",25,25,27,27,27,32,31,28,25,27,29],
                        body: concepts
                    },
                    layout: {
                        hLineWidth: function () {
                            return  0.7;
                        },
                        vLineWidth: function () {
                            return 0.7;
                        },
                        hLineColor: function () {
                            return 'black';
                        },
                        vLineColor: function () {
                            return 'black';
                        },
                    }
                },
                {text: "\n"}
            ]

            if(comercioExterior !== undefined)
            {
                var comercioE = []
                psItems = 0;

                comercioE[psItems] = [
                    {border: [true, true, true, false], text: "Complemento de Comercio Exterior", style: 'textotablaEmisorReceptor', alignment: "center", colSpan:2},
                    {border: [true, true, true, false], text: ""}, 

                ]
        
                psItems++

                comercioE[psItems] = [
                    {border: [true, false, true, false], text: "", colSpan:2},
                    {border: [true, true, true, false], text: ""}, 

                ]
        
                psItems++

                comercioE[psItems] = [
                    {border: [true, false, false, false], text: "Tipo de Operación: " + comercioExterior.attributes.TipoOperacion, style: 'textotablaEmisorReceptor', alignment: "left"},
                    {border: [false, false, true, false], text: "Incoterm: " + comercioExterior.attributes.Incoterm, style: 'textotablaEmisorReceptor', alignment: "left",}, 

                ]
        
                psItems++

                comercioE[psItems] = [
                    {border: [true, false, false, false], text: "Clave de Pedimento: " + comercioExterior.attributes.ClaveDePedimento, style: 'textotablaEmisorReceptor', alignment: "left"},
                    {border: [false, false, true, false], text: "Subdivisión: " + comercioExterior.attributes.Subdivision, style: 'textotablaEmisorReceptor', alignment: "left",}, 

                ]
        
                psItems++

                comercioE[psItems] = [
                    {border: [true, false, false, false], text: "Certificado Origen: " + comercioExterior.attributes.CertificadoOrigen, style: 'textotablaEmisorReceptor', alignment: "left"},
                    {border: [false, false, true, false], text: "Tipo de Cambio USD: " + "$" + parseFloat(comercioExterior.attributes.TipoCambioUSD).toLocaleString("en"), style: 'textotablaEmisorReceptor', alignment: "left",}, 

                ]
        
                psItems++

                comercioE[psItems] = [
                    {border: [true, false, true, false], text: "", colSpan:2},
                    {border: [true, true, true, false], text: ""}, 

                ]
        
                psItems++

                comercioE[psItems] = [
                    {border: [true, false, true, false], text: "Mercancías", style: 'textotablaEmisorReceptor', alignment: "left", colSpan: 2},
                    {border: [false, false, true, false], text: ""}, 

                ]
        
                psItems++

                //Tabla para las mercancias
                var mercanciasT = []
                psItems = 0;

                mercanciasT[psItems] = [
                    {fillColor: "#e4e4e4", border: [true, false, false, false], text: "No. Identificación", style: 'textotabla', alignment: "center"},
                    {fillColor: "#e4e4e4", border: [false, false, false, false], text: "Fracción Arancelaria", style: 'textotabla', alignment: "center"}, 
                    {fillColor: "#e4e4e4", border: [false, false, false, false], text: "Cantidad Aduana", style: 'textotabla', alignment: "center"}, 
                    {fillColor: "#e4e4e4", border: [false, false, false, false], text: "Unidad Aduana", style: 'textotabla', alignment: "center"}, 
                    {fillColor: "#e4e4e4", border: [false, false, false, false], text: "Valor Unitario Aduana", style: 'textotabla', alignment: "center"}, 
                    {fillColor: "#e4e4e4", border: [false, false, true, false], text: "Valor Dólares", style: 'textotabla', alignment: "center"},
                ]
        
                psItems++

                var mercArray = comercioExterior.elements.find( o => o.name === "cce11:Mercancias")
                //console.log(mercArray)

                for(var i=0; i<mercArray.elements.length; i++)
                {

                    if(i!==mercArray.elements.length-1)
                    {
                        mercanciasT[psItems] = [
                            {border: [true, false, false, false], text: mercArray.elements[i].attributes.NoIdentificacion, style: 'textotabla', alignment: "center"},
                            {border: [false, false, false, false], text: mercArray.elements[i].attributes.FraccionArancelaria, style: 'textotabla', alignment: "center"}, 
                            {border: [false, false, false, false], text: mercArray.elements[i].attributes.CantidadAduana, style: 'textotabla', alignment: "center"}, 
                            {border: [false, false, false, false], text: mercArray.elements[i].attributes.UnidadAduana, style: 'textotabla', alignment: "center"}, 
                            {border: [false, false, false, false], text: mercArray.elements[i].attributes.ValorUnitarioAduana, style: 'textotabla', alignment: "center"}, 
                            {border: [false, false, true, false], text: "$" + parseFloat(mercArray.elements[i].attributes.ValorDolares).toLocaleString("en"), style: 'textotabla', alignment: "center"},
                        ]
                
                        psItems++
                        
                        mercanciasT[psItems] = [
                            {border: [true, false, false, false], text: [
                                {text: "Marca: ", style: 'textotablaboldblack', alignment: "left"},
                                {text: mercArray.elements[i].elements[0].attributes.Marca, style: 'textotabla', alignment: "left"}
                            ]},
                            {border: [false, false, false, false], text: [
                                {text: "Modelo: ", style: 'textotablaboldblack', alignment: "left"},
                                {text: mercArray.elements[i].elements[0].attributes.Modelo, style: 'textotabla', alignment: "left"}
                            ], colSpan: 2}, 
                            {border: [false, false, false, false], text: ""},
                            {border: [false, false, false, false], text: [
                                {text: "Submodelo: ", style: 'textotablaboldblack', alignment: "left"},
                                {text: mercArray.elements[i].elements[0].attributes.SubModelo, style: 'textotabla', alignment: "left"}
                            ], colSpan: 2},
                            {border: [false, false, false, false], text: ""},
                            {border: [false, false, true, false], text: [
                                {text: "No. Serie: ", style: 'textotablaboldblack', alignment: "left"},
                                {text: mercArray.elements[i].elements[0].attributes.NumeroSerie, style: 'textotabla', alignment: "left"}
                            ]},
                        ]
                
                        psItems++
                    }
                    else {
                        mercanciasT[psItems] = [
                            {border: [true, false, false, false], text: mercArray.elements[i].attributes.NoIdentificacion, style: 'textotabla', alignment: "center"},
                            {border: [false, false, false, false], text: mercArray.elements[i].attributes.FraccionArancelaria, style: 'textotabla', alignment: "center"}, 
                            {border: [false, false, false, false], text: mercArray.elements[i].attributes.CantidadAduana, style: 'textotabla', alignment: "center"}, 
                            {border: [false, false, false, false], text: mercArray.elements[i].attributes.UnidadAduana, style: 'textotabla', alignment: "center"}, 
                            {border: [false, false, false, false], text: mercArray.elements[i].attributes.ValorUnitarioAduana, style: 'textotabla', alignment: "center"}, 
                            {border: [false, false, true, false], text: "$" + parseFloat(mercArray.elements[i].attributes.ValorDolares).toLocaleString("en"), style: 'textotabla', alignment: "center"},
                        ]
                
                        psItems++
                        
                        mercanciasT[psItems] = [
                            {border: [true, false, false, true], text: [
                                {text: "Marca: ", style: 'textotablaboldblack', alignment: "left"},
                                {text: mercArray.elements[i].elements[0].attributes.Marca, style: 'textotabla', alignment: "left"}
                            ]},
                            {border: [false, false, false, true], text: [
                                {text: "Modelo: ", style: 'textotablaboldblack', alignment: "left"},
                                {text: mercArray.elements[i].elements[0].attributes.Modelo, style: 'textotabla', alignment: "left"}
                            ], colSpan: 2}, 
                            {border: [false, false, false, false], text: ""},
                            {border: [false, false, false, true], text: [
                                {text: "Submodelo: ", style: 'textotablaboldblack', alignment: "left"},
                                {text: mercArray.elements[i].elements[0].attributes.SubModelo, style: 'textotabla', alignment: "left"}
                            ], colSpan: 2},
                            {border: [false, false, false, false], text: ""},
                            {border: [false, false, true, true], text: [
                                {text: "No. Serie: ", style: 'textotablaboldblack', alignment: "left"},
                                {text: mercArray.elements[i].elements[0].attributes.NumeroSerie, style: 'textotabla', alignment: "left"}
                            ]},
                        ]
                
                        psItems++
                    }
                }

                comercioExteriorTable = 
                [
                    {
                        table: {
                            dontBreakRows: true, 
                            widths: [250, "*"],
                            body: comercioE
                        },
                        layout: {
                            hLineWidth: function () {
                                return  0.7;
                            },
                            vLineWidth: function () {
                                return 0.7;
                            },
                            hLineColor: function () {
                                return 'black';
                            },
                            vLineColor: function () {
                                return 'black';
                            },
                        }
                    },
                    {
                        table: {
                            dontBreakRows: true, 
                            widths: [80, "*", 80, 80, 80, 80],
                            body: mercanciasT
                        },
                        layout: {
                            hLineWidth: function () {
                                return  0.7;
                            },
                            vLineWidth: function () {
                                return 0.7;
                            },
                            hLineColor: function () {
                                return 'black';
                            },
                            vLineColor: function () {
                                return 'black';
                            },
                        }
                    },
                    {text: "\n"}
                ]                
            }
            
        }
        else if(attributes.TipoDeComprobante === "P")
        {
            tipoComprobante = {
                table: {
                    widths: [160,"*",160],
                    body: [
                        [
                            {border: [true, false, true, false], text: `Tipo de comprobante`, style: 'textotablaEmisorReceptor', alignment: "center"},
                            {border: [true, false, true, false], text: `Tipo de Relación entre CFDI`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            {border: [true, false, true, false], text: `Clave de Uso de CFDI`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                        ],
                        [
                            {border: [true, false, true, true], text: attributes.TipoDeComprobante + " - " +  resTipoComprobante, style: 'textotablaEmisorReceptor', alignment: "center"},
                            {border: [true, false, true, true], text: ``, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            {border: [true, false, true, true], text: receptor.attributes.UsoCFDI + " - " + resUsoCFDI, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                        ],
                    ]
                },
                layout: {
                    hLineWidth: function () {
                        return  0.7;
                    },
                    vLineWidth: function () {
                        return 0.7;
                    },
                    hLineColor: function () {
                        return 'black';
                    },
                    vLineColor: function () {
                        return 'black';
                    },
                }	
            }

            var concepts = []
            var psItems = 0;

            concepts[psItems] = [
                {border: [true, true, false, true], text: `Clave Producto`, style: 'textotabla2', alignment: "center"},
                {border: [false, true, false, true], text: `Clave SAT`, style: 'textotabla2', alignment: "center"}, 
                {border: [false, true, false, true], text: `Descripción`, style: 'textotabla2', alignment: "center"}, 
                {border: [false, true, false, true], text: `Unidad`, style: 'textotabla2', alignment: "center"},  
                {border: [false, true, false, true], text: `Cantidad`, style: 'textotabla2', alignment: "center"},
                {border: [false, true, false, true], text: `Precio Unitario`, style: 'textotabla2', alignment: "center"}, 
                {border: [false, true, true, true], text: `Base`, style: 'textotabla2', alignment: "center"},
            ]

            psItems++

            //Iteramos cada uno de los conceptos
            for(var i=0; i<conceptos.elements.length; i++)
            {
                //var impuestos = conceptos.elements[i].elements.find( o => o.name === "cfdi:Impuestos")
                //var traslados = impuestos.elements.find( o => o.name === "cfdi:Traslados")
                
                if(i !== conceptos.elements.length-1)
                {
                    concepts[psItems] = [
                        {border: [true, false, false, false], text: conceptos.elements[i].attributes.NoIdentificacion, style: 'textotabla', alignment: "center"},
                        {border: [false, false, false, false], text: conceptos.elements[i].attributes.ClaveProdServ, style: 'textotabla', alignment: "center"}, 
                        {border: [false, false, false, false], text: conceptos.elements[i].attributes.Descripcion + "\n" + "Objeto Imp.: " + conceptos.elements[i].attributes.ObjetoImp, style: 'textotabla', alignment: "center"}, 
                        {border: [false, false, false, false], text: conceptos.elements[i].attributes.Unidad, style: 'textotabla', alignment: "center"},  
                        {border: [false, false, false, false], text: conceptos.elements[i].attributes.Cantidad, style: 'textotabla', alignment: "center"},
                        {border: [false, false, false, false], text: "$" + parseFloat(conceptos.elements[i].attributes.ValorUnitario).toLocaleString("en"), style: 'textotabla', alignment: "center"}, 
                        {border: [false, false, true, false], text: "$0", style: 'textotabla', alignment: "center"}, 
                    ]
            
                    psItems++
                }
                else {
                    concepts[psItems] = [
                        {border: [true, false, false, true], text: conceptos.elements[i].attributes.NoIdentificacion, style: 'textotabla', alignment: "center"},
                        {border: [false, false, false, true], text: conceptos.elements[i].attributes.ClaveProdServ, style: 'textotabla', alignment: "center"}, 
                        {border: [false, false, false, true], text: conceptos.elements[i].attributes.Descripcion + "\n" + "Objeto Imp.: " + conceptos.elements[i].attributes.ObjetoImp, style: 'textotabla', alignment: "center"}, 
                        {border: [false, false, false, true], text: conceptos.elements[i].attributes.Unidad, style: 'textotabla', alignment: "center"}, 
                        {border: [false, false, false, true], text: conceptos.elements[i].attributes.Cantidad, style: 'textotabla', alignment: "center"},
                        {border: [false, false, false, true], text: "$" + parseFloat(conceptos.elements[i].attributes.ValorUnitario).toLocaleString("en"), style: 'textotabla', alignment: "center"}, 
                        {border: [false, false, true, true], text: "$0", style: 'textotabla', alignment: "center"}, 
                    ]
            
                    psItems++
                }
            }

            conceptosTable = 
            [
                {
                    table: {
                        dontBreakRows: true, 
                        headerRows: 1,
                        widths: [60,60,"*",60,60,60,60],
                        body: concepts
                    },
                    layout: {
                        hLineWidth: function () {
                            return  0.7;
                        },
                        vLineWidth: function () {
                            return 0.7;
                        },
                        hLineColor: function () {
                            return 'black';
                        },
                        vLineColor: function () {
                            return 'black';
                        },
                    }
                },
                {text: "\n"}   
            ]

            var pagos = []
            psItems = 0;

            var paramsFormaPago2 = {
                pvOptionCRUD: "R",
                pvIdCatalog: pago.elements[0].attributes.FormaDePagoP,
                table: "SAT_Cat_Payment_Instruments"
            }
    
            var resFormaPago2 = await dbcatcatalogs.getCatalogIdDescription(paramsFormaPago2);

            var paramsMoneda2 = {
                pvOptionCRUD: "R",
                pvIdCatalog: pago.elements[0].attributes.MonedaP,
                table: "SAT_Cat_Currencies"
            }
    
            var resMoneda2 = await dbcatcatalogs.getCatalogIdShortDescription(paramsMoneda2);

            pagos[psItems] = [
                {border: [true, true, true, false], text: `Complemento de pago versión 2.0`, style: 'textotablaEmisorReceptor', alignment: "center", colSpan: 2},
                {border: [true, true, true, false], text: ``}, 
            ]

            psItems++

            pagos[psItems] = [
                {border: [true, false, true, false], text: ``, colSpan: 2},
                {border: [true, false, true, false], text: ``}, 
            ]

            psItems++

            pagos[psItems] = [
                {border: [true, false, false, false], text: `Fecha de Pago: `  + pago.elements[0].attributes.FechaPago, style: 'textotablaEmisorReceptor', alignment: "left"},
                {border: [false, false, true, false], text: `Total del Pago: ` + "$" + parseFloat(pago.elements[0].attributes.Monto).toLocaleString("en"), style: 'textotablaEmisorReceptor', alignment: "left"}, 
            ]

            psItems++

            pagos[psItems] = [
                {border: [true, false, false, false], text: `RFC Entidad Emisora: ` + pago.elements[0].attributes.RfcEmisorCtaOrd, style: 'textotablaEmisorReceptor', alignment: "left"},
                {border: [false, false, true, false], text: `RFC Entidad Beneficiaria: ` + pago.elements[0].attributes.RfcEmisorCtaBen, style: 'textotablaEmisorReceptor', alignment: "left"}, 
            ]

            psItems++

            pagos[psItems] = [
                {border: [true, false, false, false], text: `Nombre Entidad Emisora: ` , style: 'textotablaEmisorReceptor', alignment: "left"},
                {border: [false, false, true, false], text: `Nombre Entidad Beneficiaria: `, style: 'textotablaEmisorReceptor', alignment: "left"}, 
            ]

            psItems++

            pagos[psItems] = [
                {border: [true, false, false, false], text: `Cuenta Origen: ` + pago.elements[0].attributes.CtaOrdenante, style: 'textotablaEmisorReceptor', alignment: "left"},
                {border: [false, false, true, false], text: `Cuenta Destino: ` + pago.elements[0].attributes.CtaBeneficiario, style: 'textotablaEmisorReceptor', alignment: "left"}, 
            ]

            psItems++
            
            var tipoCambio = "";
            if(pago.elements[0].attributes.TipoCambioP !== undefined)
            {
                tipoCambio = pago.elements[0].attributes.TipoCambioP;
            }

            pagos[psItems] = [
                {border: [true, false, false, false], text: `Tipo de Cambio: ` + tipoCambio, style: 'textotablaEmisorReceptor', alignment: "left"},
                {border: [false, false, true, false], text: `Moneda: ` + pago.elements[0].attributes.MonedaP + " - " + resMoneda2, style: 'textotablaEmisorReceptor', alignment: "left"}, 
            ]

            psItems++

            pagos[psItems] = [
                {border: [true, false, false, false], text: `Forma de Pago: ` + pago.elements[0].attributes.FormaDePagoP + " - " + resFormaPago2, style: 'textotablaEmisorReceptor', alignment: "left"},
                {border: [false, false, true, false], text: ``, style: 'textotablaEmisorReceptor', alignment: "left"}, 
            ]

            psItems++
            

            pagosTable = 
            {
                table: {
                    dontBreakRows: true, 
                    widths: ["*", 262],
                    body: pagos
                },
                layout: {
                    hLineWidth: function () {
                        return  0.7;
                    },
                    vLineWidth: function () {
                        return 0.7;
                    },
                    hLineColor: function () {
                        return 'black';
                    },
                    vLineColor: function () {
                        return 'black';
                    },
                }
            }

            var cfdiRelacionados = []
            psItems = 0;

            cfdiRelacionados[psItems] = [
                {border: [true, true, true, false], text: `CFDI Relacionados`, style: 'textotablaEmisorReceptor', alignment: "center", colSpan: 10},
                {border: [true, true, true, false], text: ``}, 
                {border: [true, true, true, false], text: ``}, 
                {border: [true, true, true, false], text: ``}, 
                {border: [true, true, true, false], text: ``}, 
                {border: [true, true, true, false], text: ``}, 
                {border: [true, true, true, false], text: ``}, 
                {border: [true, true, true, false], text: ``}, 
                {border: [true, true, true, false], text: ``}, 
                {border: [true, true, true, false], text: ``}, 
            ]

            psItems++

            cfdiRelacionados[psItems] = [
                {border: [true, false, true, false], text: "", colSpan: 10},
                {border: [true, true, true, false], text: ``}, 
                {border: [true, true, true, false], text: ``}, 
                {border: [true, true, true, false], text: ``}, 
                {border: [true, true, true, false], text: ``}, 
                {border: [true, true, true, false], text: ``}, 
                {border: [true, true, true, false], text: ``}, 
                {border: [true, true, true, false], text: ``}, 
                {border: [true, true, true, false], text: ``}, 
                {border: [true, true, true, false], text: ``}, 
            ]

            psItems++

            cfdiRelacionados[psItems] = [
                {fillColor: "#e4e4e4", border: [true, false, false, false], text: `UUID`, style: 'textotabla', alignment: "center"},
                {fillColor: "#e4e4e4", border: [false, false, false, false], text: `No. de parcialidad`, style: 'textotabla', alignment: "center"}, 
                {fillColor: "#e4e4e4", border: [false, false, false, false], text: `Folio`, style: 'textotabla', alignment: "center"}, 
                {fillColor: "#e4e4e4", border: [false, false, false, false], text: `Objeto Imp. DR`, style: 'textotabla', alignment: "center"}, 
                {fillColor: "#e4e4e4", border: [false, false, false, false], text: `Equivalencia DR`, style: 'textotabla', alignment: "center"}, 
                {fillColor: "#e4e4e4", border: [false, false, false, false], text: `Impuesto Retenciones DR`, style: 'textotabla', alignment: "center"}, 
                {fillColor: "#e4e4e4", border: [false, false, false, false], text: `Impuesto Retenciones del Pago`, style: 'textotabla', alignment: "center"}, 
                {fillColor: "#e4e4e4", border: [false, false, false, false], text: `Importe del saldo insoluto`, style: 'textotabla', alignment: "center"}, 
                {fillColor: "#e4e4e4", border: [false, false, false, false], text: `Saldo pendiente`, style: 'textotabla', alignment: "center"}, 
                {fillColor: "#e4e4e4", border: [false, false, true, false], text: `Importe pagado`, style: 'textotabla', alignment: "center"}, 
            ]

            psItems++

            //console.log(pago.elements[0].elements)
            var pago20;
            if(pago.elements[0].name === "pago20:Pago")
            {
                pago20 = pago.elements[0]
            }
            else {
                pago20 = pago.elements[1]
            }

            for(var i=0; i<pago20.elements.length; i++)
            {
                var impuestoRetencionesDR = 0
                if(pago20.elements[i].name === "pago20:DoctoRelacionado")
                {
                    //console.log(pago20.elements[i].elements)
                    var impuestosDR = pago20.elements[i].elements.find( o => o.name === "pago20:ImpuestosDR")
                    
                    var retencionesDR = impuestosDR.elements.find( o => o.name === "pago20:RetencionesDR")
                    if(retencionesDR !== undefined)
                    {
                        //Se realiza la suma de todas las retencionesDR+
                        for(var j=0; j<retencionesDR.elements.length; j++)
                        {
                            impuestoRetencionesDR = impuestoRetencionesDR + parseInt(retencionesDR.elements[j].attributes.ImporteDR,10);
                        }
                    }
                }

                var impuestoRetencionesP = 0
                if(pago20.elements[i].name == "pago20:ImpuestosP")
                {   
                    var retencionesP = pago20.elements[i].elements.find( o => o.name === "pago20:RetencionesP")
                    //var retencionesP = impuestosP.elements.find( o => o.name === "pago20:RetencionesDR")
                    if(retencionesP !== undefined)
                    {
                        //Se realiza la suma de todas las retencionesDR+
                        for(var j=0; j<retencionesP.elements.length; j++)
                        {
                            console.log(retencionesP.elements[j].attributes.ImporteP)
                            impuestoRetencionesP = impuestoRetencionesP + parseInt(retencionesP.elements[j].attributes.ImporteP,10)
                            console.log("YA ACABE")
                        }
                    }
                }

                if(pago20.elements[i].name === "pago20:DoctoRelacionado")
                {
                    cfdiRelacionados[psItems] = [
                        {border: [true, false, false, false], text: pago20.elements[i].attributes.IdDocumento, style: 'textotabla', alignment: "left"},
                        {border: [false, false, false, false], text: pago20.elements[i].attributes.NumParcialidad, style: 'textotabla', alignment: "center"}, 
                        {border: [false, false, false, false], text: pago20.elements[i].attributes.Folio, style: 'textotabla', alignment: "center"}, 
                        {border: [false, false, false, false], text: pago20.elements[i].attributes.ObjetoImpDR, style: 'textotabla', alignment: "center"}, 
                        {border: [false, false, false, false], text: pago20.elements[i].attributes.EquivalenciaDR, style: 'textotabla', alignment: "center"}, 
                        {border: [false, false, false, false], text: "$" + parseFloat(impuestoRetencionesDR).toLocaleString("en"), style: 'textotabla', alignment: "center"}, 
                        {border: [false, false, false, false], text: impuestoRetencionesP, style: 'textotabla', alignment: "center"}, 
                        {border: [false, false, false, false], text: "$" + parseFloat(pago20.elements[i].attributes.ImpSaldoInsoluto).toLocaleString("en"), style: 'textotabla', alignment: "center"}, 
                        {border: [false, false, false, false], text: "$" + parseFloat(pago20.elements[i].attributes.ImpSaldoAnt).toLocaleString("en"), style: 'textotabla', alignment: "center"}, 
                        {border: [false, false, true, false], text: "$" + parseFloat(pago20.elements[i].attributes.ImpPagado).toLocaleString("en"), style: 'textotabla', alignment: "center"}, 
                    ]
        
                    psItems++
                }
            }

            var pagoTotales = pago.elements.find( o => o.name === "pago20:Totales");

            var retIva = 0
            if(pagoTotales.attributes.TotalRetencionesIVA !== undefined)
            {
                retIva = pagoTotales.attributes.TotalRetencionesIVA;

                cfdiRelacionados[psItems] = [
                    {border: [false, true, false, false], text: "", style: 'textotabla', alignment: "left"},
                    {border: [false, true, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [false, true, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [false, true, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [false, true, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [true, true, true, false],  text: "Total retenciones IVA", style: 'textotabla', alignment: "left", colSpan:3},
                    {border: [true, true, true, false],  text: ""}, 
                    {border: [false, true, false, false],  text: ""}, 
                    {border: [true, true, true, false],  text: "$" + parseFloat(retIva).toLocaleString("en"), style: 'textotabla', alignment: "left", colSpan:2}, 
                    {border: [false, true, true, false],  text: ""}, 
                ]
    
                psItems++
            }

            var retIsr = 0
            if(pagoTotales.attributes.TotalRetencionesISR !== undefined)
            {
                retIsr = pagoTotales.attributes.TotalRetencionesISR;

                cfdiRelacionados[psItems] = [
                    {border: [false, false, false, false], text: "", style: 'textotabla', alignment: "left"},
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [true, false, true, false],  text: "Total Retenciones ISR", style: 'textotabla', alignment: "left", colSpan:3},
                    {border: [true, false, true, false],  text: ""}, 
                    {border: [false, false, false, false],  text: ""}, 
                    {border: [true, false, true, false],  text: "$" + parseFloat(retIsr).toLocaleString("en"), style: 'textotabla', alignment: "left", colSpan:2}, 
                    {border: [false, false, true, false],  text: ""}, 
                ]
    
                psItems++
            }

            var retIeps = 0
            if(pagoTotales.attributes.TotalRetencionesIEPS !== undefined)
            {
                retIeps = pagoTotales.attributes.TotalRetencionesIEPS;

                cfdiRelacionados[psItems] = [
                    {border: [false, false, false, false], text: "", style: 'textotabla', alignment: "left"},
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [true, false, true, false],  text: "Total Retenciones IEPS", style: 'textotabla', alignment: "left", colSpan:3},
                    {border: [true, false, true, false],  text: ""}, 
                    {border: [false, false, false, false],  text: ""}, 
                    {border: [true, false, true, false],  text: "$" + parseFloat(retIeps).toLocaleString("en"), style: 'textotabla', alignment: "left", colSpan:2}, 
                    {border: [false, false, true, false],  text: ""}, 
                ]
    
                psItems++
            }

            var trasIB16 = 0
            if(pagoTotales.attributes.TotalTrasladosBaseIVA16 !== undefined)
            {
                trasIB16 = pagoTotales.attributes.TotalTrasladosBaseIVA16;

                cfdiRelacionados[psItems] = [
                    {border: [false, false, false, false], text: "", style: 'textotabla', alignment: "left"},
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [true, false, true, false],  text: "Total Traslado Base IVA 16 ", style: 'textotabla', alignment: "left", colSpan:3},
                    {border: [true, false, true, false],  text: ""}, 
                    {border: [false, false, false, false],  text: ""}, 
                    {border: [true, false, true, false],  text: "$" + parseFloat(trasIB16).toLocaleString("en"), style: 'textotabla', alignment: "left", colSpan:2}, 
                    {border: [false, false, true, false],  text: ""}, 
                ]
    
                psItems++
            }

            var trasI16 = 0
            if(pagoTotales.attributes.TotalTrasladosImpuestoIVA16 !== undefined)
            {
                trasI16 = pagoTotales.attributes.TotalTrasladosImpuestoIVA16;

                cfdiRelacionados[psItems] = [
                    {border: [false, false, false, false], text: "", style: 'textotabla', alignment: "left"},
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [true, false, true, false],  text: "Total Traslados Impuesto IVA 16", style: 'textotabla', alignment: "left", colSpan:3},
                    {border: [true, false, true, false],  text: ""}, 
                    {border: [false, false, false, false],  text: ""}, 
                    {border: [true, false, true, false],  text: "$" + parseFloat(trasI16).toLocaleString("en"), style: 'textotabla', alignment: "left", colSpan:2}, 
                    {border: [false, false, true, false],  text: ""}, 
                ]
    
                psItems++
            }

            var trasIB8 = 0
            if(pagoTotales.attributes.TotalTrasladosBaseIVA8 !== undefined)
            {
                trasIB8 = pagoTotales.attributes.TotalTrasladosBaseIVA8;

                cfdiRelacionados[psItems] = [
                    {border: [false, false, false, false], text: "", style: 'textotabla', alignment: "left"},
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [true, false, true, false],  text: "Total Traslados Base IVA 8", style: 'textotabla', alignment: "left", colSpan:3},
                    {border: [true, false, true, false],  text: ""}, 
                    {border: [false, false, false, false],  text: ""}, 
                    {border: [true, false, true, false],  text: "$" + parseFloat(trasIB8).toLocaleString("en"), style: 'textotabla', alignment: "left", colSpan:2}, 
                    {border: [false, false, true, false],  text: ""}, 
                ]
    
                psItems++
            }

            var trasII8 = 0
            if(pagoTotales.attributes.TotalTrasladosImpuestoIVA8 !== undefined)
            {
                trasII8 = pagoTotales.attributes.TotalTrasladosImpuestoIVA8;

                cfdiRelacionados[psItems] = [
                    {border: [false, false, false, false], text: "", style: 'textotabla', alignment: "left"},
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [true, false, true, false],  text: "Total Traslados Impuestos IVA 8", style: 'textotabla', alignment: "left", colSpan:3},
                    {border: [true, false, true, false],  text: ""}, 
                    {border: [false, false, false, false],  text: ""}, 
                    {border: [true, false, true, false],  text: "$" + parseFloat(trasII8).toLocaleString("en"), style: 'textotabla', alignment: "left", colSpan:2}, 
                    {border: [false, false, true, false],  text: ""}, 
                ]
    
                psItems++
            }

            var trasBI0 = 0
            if(pagoTotales.attributes.TotalTrasladosBaseIVA0 !== undefined)
            {
                trasBI0 = pagoTotales.attributes.TotalTrasladosBaseIVA0;

                cfdiRelacionados[psItems] = [
                    {border: [false, false, false, false], text: "", style: 'textotabla', alignment: "left"},
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [true, false, true, false],  text: "Total Traslados Base IVA 0", style: 'textotabla', alignment: "left", colSpan:3},
                    {border: [true, false, true, false],  text: ""}, 
                    {border: [false, false, false, false],  text: ""}, 
                    {border: [true, false, true, false],  text: "$" + parseFloat(trasBI0).toLocaleString("en"), style: 'textotabla', alignment: "left", colSpan:2}, 
                    {border: [false, false, true, false],  text: ""}, 
                ]
    
                psItems++
            }

            var trasII0 = 0
            if(pagoTotales.attributes.TotalTrasladosImpuestoIVA0 !== undefined)
            {
                trasII0 = pagoTotales.attributes.TotalTrasladosImpuestoIVA0;

                cfdiRelacionados[psItems] = [
                    {border: [false, false, false, false], text: "", style: 'textotabla', alignment: "left"},
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [true, false, true, false],  text: "Total Traslado Impuesto IVA 0", style: 'textotabla', alignment: "left", colSpan:3},
                    {border: [true, false, true, false],  text: ""}, 
                    {border: [false, false, false, false],  text: ""}, 
                    {border: [true, false, true, false],  text: "$" + parseFloat(trasII0).toLocaleString("en"), style: 'textotabla', alignment: "left", colSpan:2}, 
                    {border: [false, false, true, false],  text: ""}, 
                ]
    
                psItems++
            }

            var trasBI6 = 0
            if(pagoTotales.attributes.TotalTrasladosBaseIVAExento !== undefined)
            {
                trasBI6 = pagoTotales.attributes.TotalTrasladosBaseIVAExento;

                cfdiRelacionados[psItems] = [
                    {border: [false, false, false, false], text: "", style: 'textotabla', alignment: "left"},
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                    {border: [true, false, true, false],  text: "Total Trasladados Base IVA Excento", style: 'textotabla', alignment: "left", colSpan:3},
                    {border: [true, false, true, false],  text: ""}, 
                    {border: [false, false, false, false],  text: ""}, 
                    {border: [true, false, true, false],  text: "$" + parseFloat(trasBI6).toLocaleString("en"), style: 'textotabla', alignment: "left", colSpan:2}, 
                    {border: [false, false, true, false],  text: ""}, 
                ]
    
                psItems++
            }

            var montoTP = 0
            if(pagoTotales.attributes.MontoTotalPagos !== undefined)
            {
                montoTP = pagoTotales.attributes.MontoTotalPagos;
            }

            cfdiRelacionados[psItems] = [
                {border: [false, false, false, false], text: "", style: 'textotabla', alignment: "left"},
                {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                {border: [false, false, false, false],  text: "", style: 'textotabla', alignment: "center"}, 
                {border: [true, false, true, true],  text: "Monto Total Pagos", style: 'textotabla', alignment: "left", colSpan:3},
                {border: [true, false, true, false],  text: ""}, 
                {border: [false, false, false, false],  text: ""}, 
                {border: [true, false, true, true],  text: "$" + parseFloat(montoTP).toLocaleString("en"), style: 'textotabla', alignment: "left", colSpan:2}, 
                {border: [false, false, true, false],  text: ""}, 
            ]

            psItems++

            cfdiRelTable = 
            [
                {
                    table: {
                        dontBreakRows: true, 
                        widths: ["*", 40, 40, 40, 40, 40, 40, 40, 40, 40],
                        body: cfdiRelacionados
                    },
                    layout: {
                        hLineWidth: function () {
                            return  0.7;
                        },
                        vLineWidth: function () {
                            return 0.7;
                        },
                        hLineColor: function () {
                            return 'black';
                        },
                        vLineColor: function () {
                            return 'black';
                        },
                    }
                },
                {text: "\n"}
            ]
        }
        else if(attributes.TipoDeComprobante === "T")
        {
            tipoComprobante = {
                table: {
                    widths: [160,"*",160],
                    body: [
                        [
                            {border: [true, false, true, false], text: `Tipo de comprobante`, style: 'textotablaEmisorReceptor', alignment: "center"},
                            {border: [true, false, true, false], text: `Tipo de Relación entre CFDI`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            {border: [true, false, true, false], text: `Clave de Uso de CFDI`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                        ],
                        [
                            {border: [true, false, true, true], text: attributes.TipoDeComprobante + " - " +  resTipoComprobante, style: 'textotablaEmisorReceptor', alignment: "center"},
                            {border: [true, false, true, true], text: ``, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            {border: [true, false, true, true], text: receptor.attributes.UsoCFDI + " - " + resUsoCFDI, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                        ],
                    ]
                },
                layout: {
                    hLineWidth: function () {
                        return  0.7;
                    },
                    vLineWidth: function () {
                        return 0.7;
                    },
                    hLineColor: function () {
                        return 'black';
                    },
                    vLineColor: function () {
                        return 'black';
                    },
                }	
            }

            condiciones = 
            {
                table: {
                    widths: ["*",90,90,101],
                    body: [
                        [
                            {border: [true, false, true, false], text: `Condiciones`, style: 'textotablaEmisorReceptor', alignment: "center"},
                            {border: [true, false, true, false], text: `Orden de Venta`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            {border: [true, false, true, false], text: `Fecha Vencimiento`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            {border: [true, false, true, false], text: `Orden de Compra`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                        ],
                        [
                            {border: [true, false, true, true], text: attributes.CondicionesDePago, style: 'textotablaEmisorReceptor', alignment: "center"},
                            {border: [true, false, true, true], text: paramsEncabezado[28], style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            {border: [true, false, true, true], text: paramsEncabezado[29], style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            {border: [true, false, true, true], text: paramsEncabezado[30], style: 'textotablaEmisorReceptor', alignment: "center"}, 
                        ],
                    ]
                },
                layout: {
                    hLineWidth: function () {
                        return  0.7;
                    },
                    vLineWidth: function () {
                        return 0.7;
                    },
                    hLineColor: function () {
                        return 'black';
                    },
                    vLineColor: function () {
                        return 'black';
                    },
                }
            }

            vendedor = 
            {
                table: {
                    widths: [80,200,90,"*"],
                    body: [
                        [
                            {border: [true, false, true, false], text: `Vendedor`, style: 'textotablaEmisorReceptor', alignment: "center"},
                            {border: [true, false, true, false], text: `Abono Bancario / Transferencia Electrónica`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            {border: [true, false, true, false], text: `Referencia Pago`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            {border: [true, false, true, false], text: `Referencia Pago Interbarcario`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                        ],
                        [
                            {border: [true, false, true, true], text: paramsEncabezado[31], style: 'textotablaEmisorReceptor', alignment: "center"},
                            {border: [true, false, true, true], text: paramsEncabezado[32], style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            {border: [true, false, true, true], text: paramsEncabezado[33], style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            {border: [true, false, true, true], text: paramsEncabezado[34], style: 'textotablaEmisorReceptor', alignment: "center"}, 
                        ],
                    ]
                },
                layout: {
                    hLineWidth: function () {
                        return  0.7;
                    },
                    vLineWidth: function () {
                        return 0.7;
                    },
                    hLineColor: function () {
                        return 'black';
                    },
                    vLineColor: function () {
                        return 'black';
                    },
                }
            }

            var concepts = []
            var psItems = 0;

            concepts[psItems] = [
                {border: [true, true, false, true], text: `Clave Producto`, style: 'textotabla', alignment: "center"},
                {border: [false, true, false, true], text: `Clave SAT`, style: 'textotabla', alignment: "center"}, 
                {border: [false, true, false, true], text: `Descripción`, style: 'textotabla', alignment: "center"}, 
                {border: [false, true, false, true], text: `Unidad`, style: 'textotabla', alignment: "center"}, 
                {border: [false, true, false, true], text: `Clave Unidad`, style: 'textotabla', alignment: "center"}, 
                {border: [false, true, false, true], text: `Cant.`, style: 'textotabla', alignment: "center"},
                {border: [false, true, false, true], text: `Lote`, style: 'textotabla', alignment: "center"}, 
                {border: [false, true, false, true], text: `Piezas`, style: 'textotabla', alignment: "center"}, 
                {border: [false, true, false, true], text: `Precio Unitario`, style: 'textotabla', alignment: "center"}, 
                {border: [false, true, false, true], text: `Base`, style: 'textotabla', alignment: "center"}, 
                {border: [false, true, false, true], text: `Impuesto`, style: 'textotabla', alignment: "center"},
                {border: [false, true, false, true], text: `Factor`, style: 'textotabla', alignment: "center"}, 
                {border: [false, true, false, true], text: `Tasa`, style: 'textotabla', alignment: "center"}, 
                {border: [false, true, true, true], text: `Importe`, style: 'textotabla', alignment: "center"}, 
            ]

            psItems++

            //Iteramos cada uno de los conceptos
            for(var i=0; i<conceptos.elements.length; i++)
            {
                if(conceptos.elements[i].elements !== undefined)
                {
                    var impuestos = conceptos.elements[i].elements.find( o => o.name === "cfdi:Impuestos")
                    var traslados = impuestos.elements.find( o => o.name === "cfdi:Traslados")

                    if(i !== conceptos.elements.length-1)
                    {
                        concepts[psItems] = [
                            {border: [true, false, false, false], text: conceptos.elements[i].attributes.NoIdentificacion, style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.ClaveProdServ, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.Descripcion + "\n" + "Objeto Imp.: " + conceptos.elements[i].attributes.ObjetoImp, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.Unidad, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.ClaveUnidad, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.Cantidad, style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, false], text: arrayLotes[i], style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: arrayPiezas[i], style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: "$" + parseFloat(conceptos.elements[i].attributes.ValorUnitario).toLocaleString("en"), style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: "$" + parseFloat(traslados.elements[0].attributes.Base).toLocaleString("en"), style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: traslados.elements[0].attributes.Impuesto, style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, false], text: traslados.elements[0].attributes.TipoFactor, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: traslados.elements[0].attributes.TasaOCuota, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, true, false], text: "$" + parseFloat(conceptos.elements[i].attributes.Importe).toLocaleString("en"), style: 'textotabla3', alignment: "center"}, 
                        ]
                
                        psItems++
                    }
                    else {
                        concepts[psItems] = [
                            {border: [true, false, false, true], text: conceptos.elements[i].attributes.NoIdentificacion, style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, true], text: conceptos.elements[i].attributes.ClaveProdServ, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: conceptos.elements[i].attributes.Descripcion + "\n" +  "Objeto Imp. - " + conceptos.elements[i].attributes.ObjetoImp, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: conceptos.elements[i].attributes.Unidad, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: conceptos.elements[i].attributes.ClaveUnidad, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: conceptos.elements[i].attributes.Cantidad, style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, true], text: arrayLotes[i], style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: arrayPiezas[i], style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: "$" + parseFloat(conceptos.elements[i].attributes.ValorUnitario).toLocaleString("en"), style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: "$" + parseFloat(traslados.elements[0].attributes.Base).toLocaleString("en"), style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: traslados.elements[0].attributes.Impuesto, style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, true], text: traslados.elements[0].attributes.TipoFactor, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: traslados.elements[0].attributes.TasaOCuota, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, true, true], text: "$" + parseFloat(conceptos.elements[i].attributes.Importe).toLocaleString("en"), style: 'textotabla3', alignment: "center"}, 
                        ]
                
                        psItems++
                    }
                }
                else {
                    if(i !== conceptos.elements.length-1)
                    {
                        console.log(conceptos.elements[i].attributes)
                        concepts[psItems] = [
                            {border: [true, false, false, false], text: conceptos.elements[i].attributes.NoIdentificacion, style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.ClaveProdServ, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.Descripcion + "\n" + "Objeto Imp.: " + conceptos.elements[i].attributes.ObjetoImp, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.Unidad, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.ClaveUnidad, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.Cantidad, style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, false], text: arrayLotes[i], style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: arrayPiezas[i], style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: "$" + parseFloat(conceptos.elements[i].attributes.ValorUnitario).toLocaleString("en"), style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: "", style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: "", style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, false], text: "", style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: "", style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, true, false], text: "$" + parseFloat(conceptos.elements[i].attributes.Importe).toLocaleString("en"), style: 'textotabla3', alignment: "center"}, 
                        ]
                
                        psItems++
                    }
                    else {
                        concepts[psItems] = [
                            {border: [true, false, false, true], text: conceptos.elements[i].attributes.NoIdentificacion, style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, true], text: conceptos.elements[i].attributes.ClaveProdServ, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: conceptos.elements[i].attributes.Descripcion + "\n" +  "Objeto Imp. - " + conceptos.elements[i].attributes.ObjetoImp, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: conceptos.elements[i].attributes.Unidad, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: conceptos.elements[i].attributes.ClaveUnidad, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: conceptos.elements[i].attributes.Cantidad, style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, true], text: arrayLotes[i], style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: arrayPiezas[i], style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: "$" + parseFloat(conceptos.elements[i].attributes.ValorUnitario).toLocaleString("en"), style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: "", style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: "", style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, true], text: "", style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: "", style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, true, true], text: "$" + parseFloat(conceptos.elements[i].attributes.Importe).toLocaleString("en"), style: 'textotabla3', alignment: "center"}, 
                        ]
                
                        psItems++
                    }
                }
            }

            conceptosTable = 
            [
                {
                    table: {
                        dontBreakRows: true, 
                        headerRows: 1,
                        widths: [27,35,"*",27,27,27,27,27,27,27,28,27,27,27],
                        body: concepts
                    },
                    layout: {
                        hLineWidth: function () {
                            return  0.7;
                        },
                        vLineWidth: function () {
                            return 0.7;
                        },
                        hLineColor: function () {
                            return 'black';
                        },
                        vLineColor: function () {
                            return 'black';
                        },
                    }
                },
                {text: "\n"}
            ]
        }
        else if(attributes.TipoDeComprobante === "E")
        {
            tipoComprobante = {
                table: {
                    widths: [100,120,90,90,"*"],
                    body: [
                        [
                            {border: [true, false, true, false], text: `Tipo de comprobante`, style: 'textotablaEmisorReceptor', alignment: "center"},
                            {border: [true, false, true, false], text: `Tipo de Relación entre CFDI`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            {border: [true, false, true, false], text: `Clave de Uso de CFDI`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            {border: [true, false, true, false], text: `Método de Pago`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            {border: [true, false, true, false], text: `Forma de Pago`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                        ],
                        [
                            {border: [true, false, true, true], text: attributes.TipoDeComprobante + " - " +  resTipoComprobante, style: 'textotablaEmisorReceptor', alignment: "center"},
                            {border: [true, false, true, true], text: ``, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            {border: [true, false, true, true], text: receptor.attributes.UsoCFDI + " - " + resUsoCFDI, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            {border: [true, false, true, true], text: attributes.MetodoPago + " - " + resMetodoPago, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            {border: [true, false, true, true], text: attributes.FormaPago + " - " + resFormaPago, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                        ],
                    ]
                },
                layout: {
                    hLineWidth: function () {
                        return  0.7;
                    },
                    vLineWidth: function () {
                        return 0.7;
                    },
                    hLineColor: function () {
                        return 'black';
                    },
                    vLineColor: function () {
                        return 'black';
                    },
                }	
            }

            vendedor = 
            {
                table: {
                    widths: [160,"*",160],
                    body: [
                        [
                            {border: [true, false, true, false], text: `Vendedor`, style: 'textotablaEmisorReceptor', alignment: "center"},
                            {border: [true, false, true, false], text: `Orden de Venta`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            {border: [true, false, true, false], text: `Orden de Compra`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                        ],
                        [
                            {border: [true, false, true, true], text: paramsEncabezado[31], style: 'textotablaEmisorReceptor', alignment: "center"},
                            {border: [true, false, true, true], text: paramsEncabezado[28], style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            {border: [true, false, true, true], text: paramsEncabezado[30], style: 'textotablaEmisorReceptor', alignment: "center"}, 
                        ],
                    ]
                },
                layout: {
                    hLineWidth: function () {
                        return  0.7;
                    },
                    vLineWidth: function () {
                        return 0.7;
                    },
                    hLineColor: function () {
                        return 'black';
                    },
                    vLineColor: function () {
                        return 'black';
                    },
                }
            }

            var concepts = []
            var psItems = 0;

            concepts[psItems] = [
                {border: [true, true, false, true], text: `Clave Producto`, style: 'textotabla', alignment: "center"},
                {border: [false, true, false, true], text: `Clave SAT`, style: 'textotabla', alignment: "center"}, 
                {border: [false, true, false, true], text: `Descripción`, style: 'textotabla', alignment: "center"}, 
                {border: [false, true, false, true], text: `Unidad`, style: 'textotabla', alignment: "center"}, 
                {border: [false, true, false, true], text: `Clave Unidad`, style: 'textotabla', alignment: "center"}, 
                {border: [false, true, false, true], text: `Cant.`, style: 'textotabla', alignment: "center"},
                {border: [false, true, false, true], text: `Lote`, style: 'textotabla', alignment: "center"}, 
                {border: [false, true, false, true], text: `Piezas`, style: 'textotabla', alignment: "center"}, 
                {border: [false, true, false, true], text: `Precio Unitario`, style: 'textotabla', alignment: "center"}, 
                {border: [false, true, false, true], text: `Base`, style: 'textotabla', alignment: "center"}, 
                {border: [false, true, false, true], text: `Impuesto`, style: 'textotabla', alignment: "center"},
                {border: [false, true, false, true], text: `Factor`, style: 'textotabla', alignment: "center"}, 
                {border: [false, true, false, true], text: `Tasa`, style: 'textotabla', alignment: "center"}, 
                {border: [false, true, true, true], text: `Importe`, style: 'textotabla', alignment: "center"}, 
            ]

            psItems++

            //Iteramos cada uno de los conceptos
            for(var i=0; i<conceptos.elements.length; i++)
            {
                if(conceptos.elements[i].elements !== undefined)
                {
                    var impuestos = conceptos.elements[i].elements.find( o => o.name === "cfdi:Impuestos")
                    var traslados = impuestos.elements.find( o => o.name === "cfdi:Traslados")

                    if(i !== conceptos.elements.length-1)
                    {
                        concepts[psItems] = [
                            {border: [true, false, false, false], text: conceptos.elements[i].attributes.NoIdentificacion, style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.ClaveProdServ, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.Descripcion + "\n" + "Objeto Imp.: " + conceptos.elements[i].attributes.ObjetoImp, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.Unidad, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.ClaveUnidad, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.Cantidad, style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, false], text: arrayLotes[i], style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: arrayPiezas[i], style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: "$" + parseFloat(conceptos.elements[i].attributes.ValorUnitario).toLocaleString("en"), style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: "$" + parseFloat(traslados.elements[0].attributes.Base).toLocaleString("en"), style: 'textotabla', alignment: "center"}, 
                            {border: [false, false, false, false], text: traslados.elements[0].attributes.Impuesto, style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, false], text: traslados.elements[0].attributes.TipoFactor, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: traslados.elements[0].attributes.TasaOCuota, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, true, false], text: "$" + parseFloat(conceptos.elements[i].attributes.Importe).toLocaleString("en"), style: 'textotabla', alignment: "center"}, 
                        ]
                
                        psItems++
                    }
                    else {
                        concepts[psItems] = [
                            {border: [true, false, false, true], text: conceptos.elements[i].attributes.NoIdentificacion, style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, true], text: conceptos.elements[i].attributes.ClaveProdServ, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: conceptos.elements[i].attributes.Descripcion + "\n" +  "Objeto Imp. - " + conceptos.elements[i].attributes.ObjetoImp, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: conceptos.elements[i].attributes.Unidad, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: conceptos.elements[i].attributes.ClaveUnidad, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: conceptos.elements[i].attributes.Cantidad, style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, true], text: arrayLotes[i], style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: arrayPiezas[i], style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: "$" + parseFloat(conceptos.elements[i].attributes.ValorUnitario).toLocaleString("en"), style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: "$" + parseFloat(traslados.elements[0].attributes.Base).toLocaleString("en"), style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: traslados.elements[0].attributes.Impuesto, style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, true], text: traslados.elements[0].attributes.TipoFactor, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: traslados.elements[0].attributes.TasaOCuota, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, true, true], text: "$" + parseFloat(conceptos.elements[i].attributes.Importe).toLocaleString("en"), style: 'textotabla3', alignment: "center"}, 
                        ]
                
                        psItems++
                    }
                }
                else {
                    if(i !== conceptos.elements.length-1)
                    {
                        console.log(conceptos.elements[i].attributes)
                        concepts[psItems] = [
                            {border: [true, false, false, false], text: conceptos.elements[i].attributes.NoIdentificacion, style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.ClaveProdServ, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.Descripcion + "\n" + "Objeto Imp.: " + conceptos.elements[i].attributes.ObjetoImp, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.Unidad, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.ClaveUnidad, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.Cantidad, style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, false], text: arrayLotes[i], style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: arrayPiezas[i], style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: "$" + parseFloat(conceptos.elements[i].attributes.ValorUnitario).toLocaleString("en"), style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: "", style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: "", style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, false], text: "", style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, false], text: "", style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, true, false], text: "$" + parseFloat(conceptos.elements[i].attributes.Importe).toLocaleString("en"), style: 'textotabla3', alignment: "center"}, 
                        ]
                
                        psItems++
                    }
                    else {
                        concepts[psItems] = [
                            {border: [true, false, false, true], text: conceptos.elements[i].attributes.NoIdentificacion, style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, true], text: conceptos.elements[i].attributes.ClaveProdServ, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: conceptos.elements[i].attributes.Descripcion + "\n" +  "Objeto Imp. - " + conceptos.elements[i].attributes.ObjetoImp, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: conceptos.elements[i].attributes.Unidad, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: conceptos.elements[i].attributes.ClaveUnidad, style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: conceptos.elements[i].attributes.Cantidad, style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, true], text: arrayLotes[i], style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: arrayPiezas[i], style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: "$" + parseFloat( conceptos.elements[i].attributes.ValorUnitario).toLocaleString("en"), style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: "", style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: "", style: 'textotabla3', alignment: "center"},
                            {border: [false, false, false, true], text: "", style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, false, true], text: "", style: 'textotabla3', alignment: "center"}, 
                            {border: [false, false, true, true], text: "$" + parseFloat(conceptos.elements[i].attributes.Importe).toLocaleString("en"), style: 'textotabla3', alignment: "center"}, 
                        ]
                
                        psItems++
                    }
                }
            }

            conceptosTable = 
            [
                {
                    table: {
                        dontBreakRows: true, 
                        headerRows: 1,
                        widths: [27,35,"*",27,27,27,27,27,27,27,28,27,27,27],
                        body: concepts
                    },
                    layout: {
                        hLineWidth: function () {
                            return  0.7;
                        },
                        vLineWidth: function () {
                            return 0.7;
                        },
                        hLineColor: function () {
                            return 'black';
                        },
                        vLineColor: function () {
                            return 'black';
                        },
                    }
                },
                {text: "\n"}
            ]
        }

        var leyendasF = {}
        var norma = {}

        if(leyendaFiscal !== undefined)
        {
            leyendasF = [
                {
                    table: {
                        widths: [250,"*"],
                        body: [
                            [
                                {text: `Complemento Leyendas Fiscales Versión`, style: 'textotablaEmisorReceptor', alignment: "center"},
                                {text: `Disposición Fiscal`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            ],
                            [
                                {text: leyendaFiscal.attributes.version, style: 'textotablaEmisorReceptor', alignment: "center"},
                                {text: leyendaFiscal.elements[0].attributes.disposicionFiscal, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            ],
                        ]
                    },
                    layout: {
                        hLineWidth: function () {
                            return  0.7;
                        },
                        vLineWidth: function () {
                            return 0.7;
                        },
                        hLineColor: function () {
                            return 'black';
                        },
                        vLineColor: function () {
                            return 'black';
                        },
                    },
                },
                {text: "\n"}
            ]

            norma = [
                {
                    table: {
                        widths: [250,"*"],
                        body: [
                            [
                                {text: `Norma`, style: 'textotablaEmisorReceptor', alignment: "center"},
                                {text: `Leyenda Fiscal`, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            ],
                            [
                                {text: leyendaFiscal.elements[0].attributes.norma, style: 'textotablaEmisorReceptor', alignment: "center"},
                                {text: leyendaFiscal.elements[0].attributes.textoLeyenda, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            ],
                        ]
                    },
                    layout: {
                        hLineWidth: function () {
                            return  0.7;
                        },
                        vLineWidth: function () {
                            return 0.7;
                        },
                        hLineColor: function () {
                            return 'black';
                        },
                        vLineColor: function () {
                            return 'black';
                        },
                    },
                },
                {text: "\n"}
            ]

            /*if(conceptos.elements.length === 1)
            {
                espacio1 = [
                    "\n",
                    "\n",
                    "\n",
                    "\n",
                    "\n",
                    "\n",
                    "\n",
                    "\n"
                ]
            }
            else if(conceptos.elements.length === 2)
            {
                espacio1 = [
                    "\n",
                    "\n",
                    "\n",
                    "\n",
                    "\n",
                    "\n",
                    "\n"
                ]
            }
            else if(conceptos.elements.length === 3)
            {
                espacio1 = [
                    "\n",
                    "\n",
                    "\n",
                    "\n",
                    "\n",
                    "\n"
                ]
            }
            else if(conceptos.elements.length === 4)
            {
                espacio1 = [
                    "\n",
                    "\n",
                    "\n",
                    "\n",
                ]
            }
    
            else if(conceptos.elements.length === 5)
            {
                espacio1 = [
                    "\n",
                    "\n",
                    "\n",
                ]
            }
            else
            {
                espacio1 = [
                    "\n",
                ]
            }*/
        }

        //Se arma la CADENA ORIGINAL DEL COMPLEMENTO DE CERTIFICACIÓN DIGITAL DEL SAT
        var version = timbreFiscal.attributes.Version 
        if(version === undefined)
        {
            version = ""
        }
        else {
            version = version + "|"
        }

        var uuid = timbreFiscal.attributes.UUID
        if(uuid === undefined)
        {
            uuid = ""
        }
        else {
            uuid = uuid + "|"
        }

        var fechaTimbrado = timbreFiscal.attributes.FechaTimbrado
        if(fechaTimbrado === undefined)
        {
            fechaTimbrado = ""
        }
        else {
            fechaTimbrado = fechaTimbrado + "|"
        }

        var rfcProvCertif = timbreFiscal.attributes.RfcProvCertif
        if(rfcProvCertif === undefined)
        {
            rfcProvCertif = ""
        }
        else{ 
            rfcProvCertif = rfcProvCertif + "|"
        }

        var selloCFD = timbreFiscal.attributes.SelloCFD
        if(selloCFD === undefined)
        {
            selloCFD = ""
        }
        else {
            selloCFD = selloCFD + "|"
        }

        var noCertificadoSAT = timbreFiscal.attributes.NoCertificadoSAT 
        if(noCertificadoSAT == undefined)
        {
            noCertificadoSAT = ""
        }
        
        var complementoCertificacionSAT = "||" + version + uuid + fechaTimbrado + rfcProvCertif + selloCFD + noCertificadoSAT + "||"

        var cadenaCodigo = {
            text: [
                {text: "Cadena original del complemento de certificación digital del SAT:\n", style: 'textotablaEmisorReceptor'},
                {text: `${complementoCertificacionSAT}\n`, style: 'textotablacodigo'},
                {text: "\n", style: 'espacios'},
                {text: "Sello digital del CFDI:\n", style: 'textotablaEmisorReceptor'},
                {text: `${timbreFiscal.attributes.SelloCFD}\n`, style: 'textotablacodigo'},
                {text: "\n", style: 'espacios'},
                {text: "Sello digital del SAT:\n", style: 'textotablaEmisorReceptor'},
                {text: `${timbreFiscal.attributes.SelloSAT}\n`, style: 'textotablacodigo'},
            ]
        }

        var cadenasTable = 
        {
            table: {
                widths: [536],
                body: [
                    [
                        cadenaCodigo
                    ]
                ]
            },
            layout: {
                hLineWidth: function () {
                    return  0.7;
                },
                vLineWidth: function () {
                    return 0.7;
                },
                hLineColor: function () {
                    return 'black';
                },
                vLineColor: function () {
                    return 'black';
                },
            }
        }

        //Se arma el url para el código QR
        var finSelloDig = timbreFiscal.attributes.SelloCFD.substr(-8);
        var url = "https://verificacfdi.facturaelectronica.sat.gob.mx/default.aspx" + "?&id=" +
                    timbreFiscal.attributes.UUID + "&re=" + emisor.attributes.Rfc + "&rr=" + receptor.attributes.Rfc + "&tt=" + attributes.Total  + "&fe=" + finSelloDig

        var paramsTemporalFiles = {
            pvOptionCRUD: "R",
            piIdParameter: "20",
        }

        var resTemporalFiles = await dbcatgeneralparameters.getGeneralParametersbyID(paramsTemporalFiles)
        //console.log((resTemporalFiles[0])[0].Value)

        var imageQR = timbreFiscal.attributes.UUID + ".png"
        //console.log(imageQR)

        const buffer = await new AwesomeQR({
            text: url,
            size: 500,
        }).draw();

        var temporalFilesPath = (resTemporalFiles[0])[0].Value
        //console.log(temporalFilesPath)
        
        fs.writeFileSync(temporalFilesPath + imageQR, buffer);

        var paramsMoneda = {
            pvOptionCRUD: "R",
            pvIdCatalog: attributes.Moneda,
            table: "SAT_Cat_Currencies"
        }

        var resMoneda = await dbcatcatalogs.getCatalogIdShortDescription(paramsMoneda);

        var totalLetra = numeroALetras(attributes.Total, {
            plural: resMoneda.toUpperCase(),
            singular: resMoneda.toUpperCase(),
        });
        
        var codigos = {
            table: {
                dontBreakRows: true,
                widths: [110, "*", 40,80],
                body: [
                    [
                        {image: temporalFilesPath + imageQR, width: 100, height: 100, alignment: 'center', verticalAlign: 'middle'},
                        {border: [false, true, true, true], text:  `DEBO(EMOS) Y PAGARE(MOS) A LA ORDEN DE ITW POLYMEX S DE RL DE CV A LA VISTA LA CANTIDAD INDICADA, PAGOS EFECTUADOS DESPUES DEL VENCIMIENTO CAUSARÁN INTERESES MORATORIOS A RAZÓN DEL % MENSUAL. \n\n ${totalLetra} ${attributes.Moneda}`, alignment: 'left', style: "textotablaEmisorReceptor"},
                        {border: [false, true, true, true], text:[
                            {text: "Subtotal\n\n", alignment: 'left', style: "textotablatotales"},
                            {text: "I.V.A. 16%\n\n", alignment: 'left', style: "textotablatotales"},
                            {text: "Total", alignment: 'left', style: "textotablatotales"},
                        ]},
                        {border: [false, true, true, true], text:  [
                            {text: "$" + parseFloat(attributes.SubTotal).toLocaleString("en") + "\n\n", alignment: 'left', style: "textotablatotales"},
                            {text:  "" + "\n\n", alignment: 'left', style: "textotablatotales"},
                            {text:  "$" + parseFloat(attributes.Total).toLocaleString("en") + "\n\n", alignment: 'left', style: "textotablatotales"}
                        ]},
                    ],
                ]
            },
            layout: {
                hLineWidth: function () {
                    return  0.7;
                },
                vLineWidth: function () {
                    return 0.7;
                },
                hLineColor: function () {
                    return 'black';
                },
                vLineColor: function () {
                    return 'black';
                },
            }	
        }

        //Para poner el regimen fiscal en el pie de página
        var paramsRegimenFiscal = {
            pvOptionCRUD: "R",
            pvIdCatalog: emisor.attributes.RegimenFiscal,
            table: "SAT_Cat_Tax_Regimens"
        }

        var resRegimenFiscal = await dbcatcatalogs.getCatalogIdDescription(paramsRegimenFiscal)

        var docDefinition = {
            pageMargins: [ 25, 10, 25, 50 ],
            footer: function(currentPage, pageCount) {
                return {
                    margin: [ 30, 0, 30, 30 ],
                    columns: [
                        {
                            width: "*",
                            text: 'Este documento es una representación impresa de un CFDI. Régimen fiscal emisor: ' + emisor.attributes.RegimenFiscal + ' ' +  resRegimenFiscal + '\nFolio Fiscal: ' + timbreFiscal.attributes.UUID + ' Fecha de certificación: ' + timbreFiscal.attributes.FechaTimbrado  + '\nCertificado del emisor: ' + attributes.NoCertificado + ' Certificado del SAT: ' + timbreFiscal.attributes.NoCertificadoSAT + ' Consulta nuestro aviso de privacidad en www.itwpolymex.com', style: 'footer', alignment: 'left'
                        },
                        {
                            width: 90,
                            text: 'Página ' + currentPage.toString() + ' de ' + pageCount, style: 'footer', alignment: 'right'
                        },
                    ]
                }
            },
            content: [
                encabezado,
                "\n",
                emisorReceptor,
                tipoComprobante,
                condiciones,
                vendedor,
                "\n",
                conceptosTable,
                comercioExteriorTable,
                pagosTable,
                cfdiRelTable,
                leyendasF,
                norma,
                cadenasTable, 
                espacio1,
                "\n",
                codigos
                
            ],
            pageBreakBefore: function(currentNode, followingNodesOnPage, nodesOnNextPage, previousNodesOnPage) {
                return currentNode.headlineLevel === 1 && followingNodesOnPage.length === 0;
            },
            styles: {
                textoinvisible: {
                    fontSize: 2,
                    color: '#ffffff',
                },
                encabezadoRfc: {
                    fontSize: 10,
                    bold: true,
                    color: '#bd8635',
                },
                encabezadoDomicilio: {
                    fontSize: 10,
                    color: '#000000',
                },
                encabezadoTexto: {
                    fontSize: 10,
                },
                textoTablaTrasladoHeader: {
                    fontSize: 8,
                    color: '#ffffff',
                    bold: true,
                },
                textoTablaClienteHeader: {
                    fontSize: 11,
                    color: '#ffffff',
                    bold: true,
                },
                textoTablaClienteBoldblack: {
                    fontSize: 9,
                    bold: true,
                    color: '#000000',
                },
                textoTablaClienteBoldblack2: {
                    fontSize: 6,
                    bold: true,
                    color: '#000000',
                },
                textoTablaCliente: {
                    fontSize: 8,
                },
                textoTablaCodigo: {
                    fontSize: 6,
                },
                textoTablaCodigoBold: {
                    fontSize: 6,
                    bold: true,
                },
                espacios: {
                    fontSize: 5,
                },
                moneda: {
                    fontSize: 8,
                },
                ubicacionesTexto: {
                    fontSize: 6,
                },
                header: {
                    fontSize: 15,
                    bold: true,
                    color: '#d82b26',
                },
                index: {
                    fontSize: 11,
                    color: '#d82b26',
                },
                indexbackground: {
                    fontSize: 11,
                    color: '#d82b26',
                    bold: true,
                    background: '#eaa01b'
                },
                subheader: {
                    fontSize: 13,
                    bold: true,
                    color: '#d82b26',
                },
                textosubrayado: {
                    fontSize: 9,
                },
                textolista: {
                    fontSize: 7,
                },
                textolista2: {
                    fontSize: 8,
                },
                textotabla: {
                    fontSize: 6.5,
                },
                textotabla2: {
                    fontSize: 7,
                },
                textotabla3: {
                    fontSize: 5.5,
                },
                textotablacodigo: {
                    fontSize: 6.0,
                },
                textotablabold: {
                    fontSize: 12,
                    bold: true,
                    color: '#ffffff',
                },
                textotablaboldlarge: {
                    fontSize: 12,
                    bold: true,
                    color: '#000000',
                },
                textotablaboldblack: {
                    fontSize: 7,
                    bold: true,
                    color: '#000000',
                },
                textotablawhite: {
                    fontSize: 11,
                    color: '#ffffff',
                },
                textotablablack: {
                    fontSize: 11,
                },
                textotablaEmisorReceptor: {
                    fontSize: 9,
                },
                textotablacolor: {
                    fontSize: 6.5,
                    color: '#ffffff',
                    bold: true,
                },
                parrafo: {
                    fontSize: 8,
                },
                parrafoBold: {
                    fontSize: 8,
                    bold: true,
                },
                parrafoItalic: {
                    fontSize: 8,
                    italics: true,
                },
                footer: {
                    fontSize: 6,
                },
                quote: {
                    italics: true
                },
                small: {
                    fontSize: 8
                },
                minispace: {
                    fontSize: 3
                },
                textotablatotales: {
                    fontSize: 8
                }
            }   
        };

        var pdfDoc = printer.createPdfKitDocument(docDefinition);
        pdfDoc.pipe(fs.createWriteStream("Documento.pdf"));
        pdfDoc.end();

        
        return new Promise( ( resolve, reject ) => {

            var pdfDoc = printer.createPdfKitDocument(docDefinition);
            fs.unlinkSync(temporalFilesPath + imageQR)

            var chunks = [];
            var base64 = '';

            pdfDoc.on('data', function (chunk) {
                chunks.push(chunk);
            });
            
            pdfDoc.on('end', function () {

                result = Buffer.concat(chunks);

                base64 = result.toString('base64');

                var result = {
                    pdfBase64: base64,
                    emailTo : arrayEmailTo,
                    emailCC: arrayEmailCC,
                    poNumber: paramsEncabezado[30]
                }
                resolve(result);

            });

            pdfDoc.on('error', (error) => {
                
                console.log(error);
                
                reject('')

            });

            pdfDoc.end();

        });

    } catch (err) {

        console.error('Error: ', err)

    }
    
}

getPDFPolymex(xmlLeyendas, "/Users/alexishernandezolvera/Desktop/PRUEBASPOLYMEX/IPM6203226B4_RI_90382_20220318_Varios_Item.txt", "/Users/alexishernandezolvera/Desktop/GTC/PROYECTOS/gtc-services-portal-api/utils/images/Logo_Polymex.png")

var numeroALetras = (function() {
    
    function Unidades(num) {

        switch (num) {
            case 1:
                return 'UN';
            case 2:
                return 'DOS';
            case 3:
                return 'TRES';
            case 4:
                return 'CUATRO';
            case 5:
                return 'CINCO';
            case 6:
                return 'SEIS';
            case 7:
                return 'SIETE';
            case 8:
                return 'OCHO';
            case 9:
                return 'NUEVE';
        }

        return '';
    } //Unidades()

    function Decenas(num) {

        let decena = Math.floor(num / 10);
        let unidad = num - (decena * 10);

        switch (decena) {
            case 1:
                switch (unidad) {
                    case 0:
                        return 'DIEZ';
                    case 1:
                        return 'ONCE';
                    case 2:
                        return 'DOCE';
                    case 3:
                        return 'TRECE';
                    case 4:
                        return 'CATORCE';
                    case 5:
                        return 'QUINCE';
                    default:
                        return 'DIECI' + Unidades(unidad);
                }
            case 2:
                switch (unidad) {
                    case 0:
                        return 'VEINTE';
                    default:
                        return 'VEINTI' + Unidades(unidad);
                }
            case 3:
                return DecenasY('TREINTA', unidad);
            case 4:
                return DecenasY('CUARENTA', unidad);
            case 5:
                return DecenasY('CINCUENTA', unidad);
            case 6:
                return DecenasY('SESENTA', unidad);
            case 7:
                return DecenasY('SETENTA', unidad);
            case 8:
                return DecenasY('OCHENTA', unidad);
            case 9:
                return DecenasY('NOVENTA', unidad);
            case 0:
                return Unidades(unidad);
        }
    } //Unidades()

    function DecenasY(strSin, numUnidades) {
        if (numUnidades > 0)
            return strSin + ' Y ' + Unidades(numUnidades)

        return strSin;
    } //DecenasY()

    function Centenas(num) {
        let centenas = Math.floor(num / 100);
        let decenas = num - (centenas * 100);

        switch (centenas) {
            case 1:
                if (decenas > 0)
                    return 'CIENTO ' + Decenas(decenas);
                return 'CIEN';
            case 2:
                return 'DOSCIENTOS ' + Decenas(decenas);
            case 3:
                return 'TRESCIENTOS ' + Decenas(decenas);
            case 4:
                return 'CUATROCIENTOS ' + Decenas(decenas);
            case 5:
                return 'QUINIENTOS ' + Decenas(decenas);
            case 6:
                return 'SEISCIENTOS ' + Decenas(decenas);
            case 7:
                return 'SETECIENTOS ' + Decenas(decenas);
            case 8:
                return 'OCHOCIENTOS ' + Decenas(decenas);
            case 9:
                return 'NOVECIENTOS ' + Decenas(decenas);
        }

        return Decenas(decenas);
    } //Centenas()

    function Seccion(num, divisor, strSingular, strPlural) {
        let cientos = Math.floor(num / divisor)
        let resto = num - (cientos * divisor)

        let letras = '';

        if (cientos > 0)
            if (cientos > 1)
                letras = Centenas(cientos) + ' ' + strPlural;
            else
                letras = strSingular;

        if (resto > 0)
            letras += '';

        return letras;
    } //Seccion()

    function Miles(num) {
        let divisor = 1000;
        let cientos = Math.floor(num / divisor)
        let resto = num - (cientos * divisor)

        let strMiles = Seccion(num, divisor, 'UN MIL', 'MIL');
        let strCentenas = Centenas(resto);

        if (strMiles == '')
            return strCentenas;

        return strMiles + ' ' + strCentenas;
    } //Miles()

    function Millones(num) {
        let divisor = 1000000;
        let cientos = Math.floor(num / divisor)
        let resto = num - (cientos * divisor)

        let strMillones = Seccion(num, divisor, 'UN MILLON DE', 'MILLONES DE');
        let strMiles = Miles(resto);

        if (strMillones == '')
            return strMiles;

        return strMillones + ' ' + strMiles;
    } //Millones()

    return function NumeroALetras(num, currency) {
        currency = currency || {};
        let data = {
            numero: num,
            enteros: Math.floor(num),
            centavos: (((Math.round(num * 100)) - (Math.floor(num) * 100))),
            letrasCentavos: '',
            letrasMonedaPlural: currency.plural, 
            letrasMonedaSingular: currency.singular, 
            letrasMonedaCentavoPlural: currency.centPlural,
            letrasMonedaCentavoSingular: currency.centSingular
        };

        /*if (data.centavos > 0) {
            data.letrasCentavos = 'CON ' + (function() {
                if (data.centavos == 1)
                    return Millones(data.centavos) + ' ' + data.letrasMonedaCentavoSingular;
                else
                    return Millones(data.centavos) + ' ' + data.letrasMonedaCentavoPlural;
            })();
        };*/

        data.letrasCentavos = data.centavos+"/100"

        if (data.enteros == 0)
            return 'CERO ' + data.letrasMonedaPlural + ' ' + data.letrasCentavos;
        if (data.enteros == 1)
            return Millones(data.enteros) + ' ' + data.letrasMonedaSingular + ' ' + data.letrasCentavos;
        else
            return Millones(data.enteros) + ' ' + data.letrasMonedaPlural + ' ' + data.letrasCentavos;
    };

})();

module.exports = {
    getPDFPolymex : getPDFPolymex
}